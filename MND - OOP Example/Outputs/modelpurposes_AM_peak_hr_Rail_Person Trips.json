{"py/object": "matrix_class_v2.MatrixStack", "_name": "modelpurposes", "_vehicle_type": "Rail", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"json://501": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 501, "_targets": {"json://501": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://502": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 502, "_targets": {"json://502": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://504": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 504, "_targets": {"json://504": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://505": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 505, "_targets": {"json://505": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://506": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 506, "_targets": {"json://506": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://509": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 509, "_targets": {"json://509": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://511": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 511, "_targets": {"json://511": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://512": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 512, "_targets": {"json://512": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://513": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 513, "_targets": {"json://513": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://514": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 514, "_targets": {"json://514": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://515": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 515, "_targets": {"json://515": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://516": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 516, "_targets": {"json://516": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://517": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 517, "_targets": {"json://517": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://519": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 519, "_targets": {"json://519": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://520": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 520, "_targets": {"json://520": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://521": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 521, "_targets": {"json://521": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://523": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 523, "_targets": {"json://523": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://524": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 524, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://525": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 525, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://526": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 526, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://527": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 527, "_targets": {"json://527": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://528": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 528, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://531": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 531, "_targets": {"json://531": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://532": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 532, "_targets": {"json://532": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://533": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 533, "_targets": {"json://533": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://534": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 534, "_targets": {"json://534": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://535": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 535, "_targets": {"json://535": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://536": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 536, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://537": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 537, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://538": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 538, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://539": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 539, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://540": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 540, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://541": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 541, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://542": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 542, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://543": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 543, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://544": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 544, "_targets": {"json://544": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://545": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 545, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://546": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 546, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://547": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 547, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://548": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 548, "_targets": {"json://548": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://551": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 551, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://562": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 562, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://566": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 566, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://567": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 567, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://570": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 570, "_targets": {"json://570": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://571": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 571, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://572": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 572, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://573": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 573, "_targets": {"json://573": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://601": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 601, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://602": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 602, "_targets": {"json://602": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://603": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 603, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://604": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 604, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://605": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 605, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://606": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 606, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://607": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 607, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://608": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 608, "_targets": {"json://608": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://609": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 609, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://610": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 610, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5001": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5001, "_targets": {"json://9009": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5002": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5002, "_targets": {"json://5002": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5003": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5003, "_targets": {"json://5003": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5004": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5004, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5005": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5005, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7105265186923027}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.2894734813076974}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5006": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5006, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.6336305213085214}, "json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.3663694786914786}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5007": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5007, "_targets": {"json://5007": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5008": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5008, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5009": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5009, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.12574033987473257}, "json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8742596601252675}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5010": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5010, "_targets": {"json://5010": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5011": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5011, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5012": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5012, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5013": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5013, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5014": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5014, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5015": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5015, "_targets": {"json://5015": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5016": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5016, "_targets": {"json://5019": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.23915238262142025}, "json://5133": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7608476173785798}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5017": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5017, "_targets": {"json://5068": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5018": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5018, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5019": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5019, "_targets": {"json://5133": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7224258444377175}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5020": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5020, "_targets": {"json://5020": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5021": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5021, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5022": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5022, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5023": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5023, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.16270700178727196}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8372929982127281}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5024": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5024, "_targets": {"json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5025": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5025, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.5924220607039576}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.40757793929604236}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5026": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5026, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5027": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5027, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5028": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5028, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8675205867701657}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.13247941322983423}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5029": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5029, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.5147106005829688}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.48528939941703114}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5030": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5030, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.38833292989011636}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.6116670701098836}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5031": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5031, "_targets": {"json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9863284020535221}, "json://5133": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.013671597946477902}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5032": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5032, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5033": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5033, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5034": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5034, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5035": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5035, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5036": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5036, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5037": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5037, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5038": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5038, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5039": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5039, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5040": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5040, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5041": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5041, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5042": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5042, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5043": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5043, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5045": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5045, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5046": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5046, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5047": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5047, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5048": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5048, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5049": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5049, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5050": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5050, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5051": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5051, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5052": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5052, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5053": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5053, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5054": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5054, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5055": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5055, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5056": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5056, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5065": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5065, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5067": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5067, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.06201399661995637}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9379860033800437}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5068": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5068, "_targets": {"json://5068": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5069": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5069, "_targets": {"json://5069": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5070": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5070, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5100": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5100, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5101": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5101, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5102": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5102, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5103": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5103, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5104": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5104, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5105": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5105, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5106": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5106, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5107": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5107, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.29235456942551624}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7076454305744838}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5108": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5108, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5109": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5109, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5110": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5110, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7387638702178395}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.26123612978216043}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5111": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5111, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.2515912022033352}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7484087977966648}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5112": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5112, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5115": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5115, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.22736056963670478}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7726394303632952}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5116": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5116, "_targets": {"json://5116": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5117": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5117, "_targets": {"json://5139": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.28054378071849867}, "json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7194562192815013}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5118": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5118, "_targets": {"json://5118": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5119": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5119, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5120": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5120, "_targets": {"json://5121": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5121": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5121, "_targets": {"json://5121": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5122": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5122, "_targets": {"json://5122": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5124": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5124, "_targets": {"json://5122": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.4437572194572055}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5125": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5125, "_targets": {"json://5124": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.13644820554642537}, "json://5003": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8635517944535747}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5126": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5126, "_targets": {"json://5132": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5127": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5127, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5128": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5128, "_targets": {"json://5132": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.028333630736165107}, "json://5003": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9716663692638349}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5129": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5129, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.11436485547237808}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8856351445276219}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5130": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5130, "_targets": {"json://5132": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.29984251486319297}, "json://5003": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7001574851368071}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5131": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5131, "_targets": {"json://5131": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5132": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5132, "_targets": {"json://5132": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5133": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5133, "_targets": {"json://5133": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5134": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5134, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.32382409830106296}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.676175901698937}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5135": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5135, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.08645655874211541}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9135434412578846}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5136": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5136, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.239089678008408}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5137": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5137, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5138": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5138, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5139": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5139, "_targets": {"json://5068": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5140": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5140, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5141": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5141, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.2216693993246311}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.778330600675369}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5142": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5142, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.026609684324048147}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9733903156759518}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5143": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5143, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.0716213365076186}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9283786634923814}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9001": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9001, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9002": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9002, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9003": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9003, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9004": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9004, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9005": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9005, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9006": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9006, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9007": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9007, "_targets": {"json://9009": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9008": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9008, "_targets": {"json://9009": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9009": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9009, "_targets": {"json://9009": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}}}, "_zones": {"py/object": "pandas.core.frame.DataFrame", "comp": true, "values": "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", "txt": false, "meta": {"dtypes": {"index": "int64", "mnd_zone": "int64", "x_coord": "int64", "y_coord": "int64", "area_ref": "object", "sector": "int64", "msoa": "object", "district": "object", "Urban city and town": "int64", "Rural village": "int64", "Rural hamlets and isolated dwellings": "int64", "Rural town and fringe": "int64", "Rural village in a sparse setting": "int64", "Rural hamlets and isolated dwellings in a sparse setting": "int64", "Rural town and fringe in a sparse setting": "int64", "urbanrural": "object", "cordon_inner": "object", "cordon_outer": "object", "Internal": "bool"}, "index": "{\"py/object\": \"pandas.core.indexes.numeric.Int64Index\", \"comp\": true, \"values\": \"eJwtk8FtRSEQA1tJATnYsMCnlij9txE8m4ulp7VXMPj9LPn7a2lEKrIiO3KfOFNn6hmJxbE4Fp9IfEORmEd8I74R34hvxDc+T2YsM/tmfDO+Gd+Mb8Y38WVpZWklUUlUEpVEJVFJVBKVxIpvx7cz2BmcLDgZnAzOW7Bz3537bvFZkRXZkRP5RN4JtrNAjagZJfQUVM2qYSX49IPm8OosAAVBgVAwFBAFRYFRJgtNgVOjn4YsWAVXAVaQFWgFWw2ykyygBWmBWrAWsAVtgVvwFsAFcYFc1Z0gC3BBXCAXzFWkFikeQIvUIrW6UGQX2d3tYsNmw2YDD2W1UjloG9qGtqFtaBvahrb/e0q269p97Zp2T7uoEDaEDWGPrjd+2Bq2hq1ha9gatoatYevZfwUnhK1ha9gatoatYWvYGraGrcP20q5Luy7turTr0q5Luy7turTr6f39AzjkrWM=\", \"txt\": false, \"meta\": {\"dtype\": \"int64\", \"name\": \"reference\"}}", "column_level_names": [null], "header": [0]}}, "_source_file": {"py/reduce": [{"py/type": "pathlib.WindowsPath"}, {"py/tuple": ["C:\\", "Users", "UKTMB001", "Documents", "Python Scripts", "MND", "ZoningTemplate_Model_v2.xlsx"]}]}, "_source_sheet": "zones"}, "_time_period": "AM_peak_hr", "_value_type": "Person Trips", "_levels": {"json://1": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 1, "_purpose": "Commuting", "_time_period": "AM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by operation <built-in function add> (reverse: False) on\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: AM_peak_hr\npurpose: Commuting\nlevel: 1\nzone_count: 168\nmatrix_sum: 2.0\ninterzonal_sum: 2.0\nintrazonal_sum: 0.0\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: AM_peak_hr\n    purpose: IB_HBW\n    level: 1\n    zone_count: 168\n    matrix_sum: 2.0\n    interzonal_sum: 2.0\n    intrazonal_sum: 0.0\n    Comments:\n    Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: AM_peak_hr\n        purpose: IB_HBW\n        level: 1\n        zone_count: 168\n        matrix_sum: 2.0\n        interzonal_sum: 2.0\n        intrazonal_sum: 0.0\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: AM_peak_hr\n            purpose: IB_HBW\n            level: 1\n            zone_count: 168\n            matrix_sum: 2.0\n            interzonal_sum: 2.0\n            intrazonal_sum: 0.0\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: AM_peak_hr\n                purpose: IB_HBW\n                level: 1\n                zone_count: 168\n                matrix_sum: 2.0\n                interzonal_sum: 2.0\n                intrazonal_sum: 0.0\n                Comments:\n                Created by disaggregate_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: AM_peak_hr\n                    purpose: IB_HBW\n                    level: 1\n                    zone_count: 120\n                    matrix_sum: 2.0\n                    interzonal_sum: 2.0\n                    intrazonal_sum: 0.0\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: AM_peak_hr\n                        purpose: IB_HBW\n                        level: 1\n                        zone_count: 120\n                        matrix_sum: 2.0\n                        interzonal_sum: 2.0\n                        intrazonal_sum: 0.0\n                        Comments:\n                        Created by operation <built-in function mul> (reverse: False) on\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: AM_peak_hr\n                            purpose: IB_HBW\n                            level: 1\n                            zone_count: 120\n                            matrix_sum: 2.0\n                            interzonal_sum: 2.0\n                            intrazonal_sum: 0.0\n                            Comments:\n                            Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_IB_HBW_Rail.csv\n                            MND Raw Data\n                            \n                        ]\n                        <built-in function mul>\n                        [\n                            1.0\n                        ]\n                        \n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n<built-in function add>\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: AM_peak_hr\npurpose: OB_HBW\nlevel: 2\nzone_count: 168\nmatrix_sum: 334.0\ninterzonal_sum: 303.24620468230444\nintrazonal_sum: 30.75379531769555\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: AM_peak_hr\n    purpose: OB_HBW\n    level: 2\n    zone_count: 168\n    matrix_sum: 334.0\n    interzonal_sum: 303.24620468230444\n    intrazonal_sum: 30.75379531769555\n    Comments:\n    Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: AM_peak_hr\n        purpose: OB_HBW\n        level: 2\n        zone_count: 168\n        matrix_sum: 334.0\n        interzonal_sum: 328.75900258420245\n        intrazonal_sum: 5.240997415797548\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: AM_peak_hr\n            purpose: OB_HBW\n            level: 2\n            zone_count: 168\n            matrix_sum: 334.0\n            interzonal_sum: 328.75900258420245\n            intrazonal_sum: 5.240997415797548\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: AM_peak_hr\n                purpose: OB_HBW\n                level: 2\n                zone_count: 168\n                matrix_sum: 334.0\n                interzonal_sum: 328.75900258420245\n                intrazonal_sum: 5.240997415797548\n                Comments:\n                Created by disaggregate_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: AM_peak_hr\n                    purpose: OB_HBW\n                    level: 2\n                    zone_count: 120\n                    matrix_sum: 334.0\n                    interzonal_sum: 330.0\n                    intrazonal_sum: 4.0\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: AM_peak_hr\n                        purpose: OB_HBW\n                        level: 2\n                        zone_count: 120\n                        matrix_sum: 334.0\n                        interzonal_sum: 330.0\n                        intrazonal_sum: 4.0\n                        Comments:\n                        Created by operation <built-in function mul> (reverse: False) on\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: AM_peak_hr\n                            purpose: OB_HBW\n                            level: 2\n                            zone_count: 120\n                            matrix_sum: 334.0\n                            interzonal_sum: 330.0\n                            intrazonal_sum: 4.0\n                            Comments:\n                            Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_OB_HBW_Rail.csv\n                            MND Raw Data\n                            \n                        ]\n                        <built-in function mul>\n                        [\n                            1.0\n                        ]\n                        \n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n"}, "json://2": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 2, "_purpose": "Employers Business", "_time_period": "AM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by operation <built-in function add> (reverse: False) on\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: AM_peak_hr\npurpose: Employers Business\nlevel: 3\nzone_count: 168\nmatrix_sum: 145.98953358700595\ninterzonal_sum: 138.72439903249713\nintrazonal_sum: 7.265134554508821\nComments:\nCreated by operation <built-in function add> (reverse: False) on\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: AM_peak_hr\n    purpose: Employers Business\n    level: 3\n    zone_count: 168\n    matrix_sum: 14.437877251290814\n    interzonal_sum: 14.413701352354808\n    intrazonal_sum: 0.02417589893600581\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: AM_peak_hr\n        purpose: IB_HBEmp\n        level: 3\n        zone_count: 168\n        matrix_sum: 14.437877251290814\n        interzonal_sum: 14.413701352354808\n        intrazonal_sum: 0.02417589893600581\n        Comments:\n        Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: AM_peak_hr\n            purpose: IB_HBEmp\n            level: 3\n            zone_count: 168\n            matrix_sum: 14.437877251290814\n            interzonal_sum: 14.381497926272356\n            intrazonal_sum: 0.056379325018458985\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: AM_peak_hr\n                purpose: IB_HBEmp\n                level: 3\n                zone_count: 168\n                matrix_sum: 14.437877251290814\n                interzonal_sum: 14.381497926272356\n                intrazonal_sum: 0.056379325018458985\n                Comments:\n                Created by furness_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: AM_peak_hr\n                    purpose: IB_HBO\n                    level: 3\n                    zone_count: 168\n                    matrix_sum: 39.0\n                    interzonal_sum: 38.7742939551676\n                    intrazonal_sum: 0.2257060448323995\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: AM_peak_hr\n                        purpose: IB_HBO\n                        level: 3\n                        zone_count: 168\n                        matrix_sum: 39.0\n                        interzonal_sum: 38.7742939551676\n                        intrazonal_sum: 0.2257060448323995\n                        Comments:\n                        Created by disaggregate_matrix operation on the following matrix:\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: AM_peak_hr\n                            purpose: IB_HBO\n                            level: 3\n                            zone_count: 120\n                            matrix_sum: 39.0\n                            interzonal_sum: 38.0\n                            intrazonal_sum: 1.0\n                            Comments:\n                            Created by copy operation on the following matrix:\n                            [\n                                Matrix Object\n                                vehicle_type: Rail\n                                value_type: Person Trips\n                                time_period: AM_peak_hr\n                                purpose: IB_HBO\n                                level: 3\n                                zone_count: 120\n                                matrix_sum: 39.0\n                                interzonal_sum: 38.0\n                                intrazonal_sum: 1.0\n                                Comments:\n                                Created by operation <built-in function mul> (reverse: False) on\n                                [\n                                    Matrix Object\n                                    vehicle_type: Rail\n                                    value_type: Person Trips\n                                    time_period: AM_peak_hr\n                                    purpose: IB_HBO\n                                    level: 3\n                                    zone_count: 120\n                                    matrix_sum: 39.0\n                                    interzonal_sum: 38.0\n                                    intrazonal_sum: 1.0\n                                    Comments:\n                                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_IB_HBO_Rail.csv\n                                    MND Raw Data\n                                    \n                                ]\n                                <built-in function mul>\n                                [\n                                    1.0\n                                ]\n                                \n                            ]\n                            \n                        ]\n                        \n                    ]\n                    \n                ]\n                Convergence Information:\n                1: count: 168, col_pass: 123, row_pass: 118\n                2: count: 168, col_pass: 123, row_pass: 118\n                3: count: 168, col_pass: 123, row_pass: 118\n                4: count: 168, col_pass: 123, row_pass: 118\n                5: count: 168, col_pass: 123, row_pass: 118\n                6: count: 168, col_pass: 123, row_pass: 118\n                7: count: 168, col_pass: 123, row_pass: 118\n                8: count: 168, col_pass: 123, row_pass: 118\n                9: count: 168, col_pass: 123, row_pass: 118\n                10: count: 168, col_pass: 123, row_pass: 118\n                11: count: 168, col_pass: 123, row_pass: 118\n                12: count: 168, col_pass: 123, row_pass: 118\n                13: count: 168, col_pass: 123, row_pass: 118\n                14: count: 168, col_pass: 123, row_pass: 118\n                15: count: 168, col_pass: 123, row_pass: 118\n                16: count: 168, col_pass: 123, row_pass: 118\n                17: count: 168, col_pass: 123, row_pass: 118\n                18: count: 168, col_pass: 123, row_pass: 118\n                19: count: 168, col_pass: 123, row_pass: 118\n                20: count: 168, col_pass: 123, row_pass: 118\n                21: count: 168, col_pass: 123, row_pass: 118\n                22: count: 168, col_pass: 123, row_pass: 119\n                23: count: 168, col_pass: 123, row_pass: 118\n                24: count: 168, col_pass: 123, row_pass: 118\n                25: count: 168, col_pass: 123, row_pass: 118\n                26: count: 168, col_pass: 123, row_pass: 118\n                27: count: 168, col_pass: 123, row_pass: 118\n                28: count: 168, col_pass: 123, row_pass: 118\n                29: count: 168, col_pass: 123, row_pass: 118\n                30: count: 168, col_pass: 123, row_pass: 118\n                31: count: 168, col_pass: 123, row_pass: 118\n                32: count: 168, col_pass: 123, row_pass: 118\n                33: count: 168, col_pass: 123, row_pass: 118\n                34: count: 168, col_pass: 123, row_pass: 118\n                35: count: 168, col_pass: 123, row_pass: 118\n                36: count: 168, col_pass: 123, row_pass: 118\n                37: count: 168, col_pass: 123, row_pass: 119\n                38: count: 168, col_pass: 123, row_pass: 118\n                39: count: 168, col_pass: 123, row_pass: 118\n                40: count: 168, col_pass: 123, row_pass: 118\n                41: count: 168, col_pass: 123, row_pass: 118\n                42: count: 168, col_pass: 123, row_pass: 118\n                43: count: 168, col_pass: 123, row_pass: 118\n                44: count: 168, col_pass: 123, row_pass: 118\n                45: count: 168, col_pass: 123, row_pass: 118\n                46: count: 168, col_pass: 123, row_pass: 118\n                47: count: 168, col_pass: 123, row_pass: 118\n                48: count: 168, col_pass: 123, row_pass: 118\n                49: count: 168, col_pass: 123, row_pass: 118\n                50: count: 168, col_pass: 123, row_pass: 118\n                51: count: 168, col_pass: 123, row_pass: 118\n                52: count: 168, col_pass: 123, row_pass: 118\n                53: count: 168, col_pass: 123, row_pass: 118\n                54: count: 168, col_pass: 123, row_pass: 118\n                55: count: 168, col_pass: 123, row_pass: 118\n                56: count: 168, col_pass: 123, row_pass: 118\n                57: count: 168, col_pass: 123, row_pass: 118\n                58: count: 168, col_pass: 123, row_pass: 118\n                59: count: 168, col_pass: 123, row_pass: 118\n                60: count: 168, col_pass: 123, row_pass: 118\n                61: count: 168, col_pass: 123, row_pass: 118\n                62: count: 168, col_pass: 123, row_pass: 118\n                63: count: 168, col_pass: 123, row_pass: 118\n                64: count: 168, col_pass: 123, row_pass: 118\n                65: count: 168, col_pass: 123, row_pass: 118\n                66: count: 168, col_pass: 123, row_pass: 118\n                67: count: 168, col_pass: 123, row_pass: 118\n                68: count: 168, col_pass: 123, row_pass: 118\n                69: count: 168, col_pass: 123, row_pass: 118\n                70: count: 168, col_pass: 123, row_pass: 118\n                71: count: 168, col_pass: 123, row_pass: 118\n                72: count: 168, col_pass: 123, row_pass: 118\n                73: count: 168, col_pass: 123, row_pass: 118\n                74: count: 168, col_pass: 123, row_pass: 118\n                75: count: 168, col_pass: 123, row_pass: 118\n                76: count: 168, col_pass: 123, row_pass: 118\n                77: count: 168, col_pass: 123, row_pass: 118\n                78: count: 168, col_pass: 123, row_pass: 118\n                79: count: 168, col_pass: 123, row_pass: 118\n                80: count: 168, col_pass: 123, row_pass: 118\n                81: count: 168, col_pass: 123, row_pass: 118\n                82: count: 168, col_pass: 123, row_pass: 118\n                83: count: 168, col_pass: 123, row_pass: 118\n                84: count: 168, col_pass: 123, row_pass: 118\n                85: count: 168, col_pass: 123, row_pass: 118\n                86: count: 168, col_pass: 123, row_pass: 118\n                87: count: 168, col_pass: 123, row_pass: 118\n                88: count: 168, col_pass: 123, row_pass: 118\n                89: count: 168, col_pass: 123, row_pass: 118\n                90: count: 168, col_pass: 123, row_pass: 118\n                91: count: 168, col_pass: 123, row_pass: 118\n                92: count: 168, col_pass: 123, row_pass: 118\n                93: count: 168, col_pass: 123, row_pass: 118\n                94: count: 168, col_pass: 123, row_pass: 118\n                95: count: 168, col_pass: 123, row_pass: 118\n                96: count: 168, col_pass: 123, row_pass: 118\n                97: count: 168, col_pass: 123, row_pass: 118\n                98: count: 168, col_pass: 123, row_pass: 118\n                99: count: 168, col_pass: 123, row_pass: 118\n                100: count: 168, col_pass: 123, row_pass: 118\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n<built-in function add>\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: AM_peak_hr\n    purpose: OB_HBEmp\n    level: 4\n    zone_count: 168\n    matrix_sum: 131.55165633571514\n    interzonal_sum: 124.31069768014233\n    intrazonal_sum: 7.240958655572816\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: AM_peak_hr\n        purpose: OB_HBEmp\n        level: 4\n        zone_count: 168\n        matrix_sum: 131.55165633571514\n        interzonal_sum: 124.31069768014233\n        intrazonal_sum: 7.240958655572816\n        Comments:\n        Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: AM_peak_hr\n            purpose: OB_HBEmp\n            level: 4\n            zone_count: 168\n            matrix_sum: 131.55165633571514\n            interzonal_sum: 130.202037007712\n            intrazonal_sum: 1.3496193280031366\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: AM_peak_hr\n                purpose: OB_HBEmp\n                level: 4\n                zone_count: 168\n                matrix_sum: 131.55165633571514\n                interzonal_sum: 130.202037007712\n                intrazonal_sum: 1.3496193280031366\n                Comments:\n                Created by furness_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: AM_peak_hr\n                    purpose: OB_HBO\n                    level: 4\n                    zone_count: 168\n                    matrix_sum: 364.0\n                    interzonal_sum: 360.77429216006425\n                    intrazonal_sum: 3.225707839935766\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: AM_peak_hr\n                        purpose: OB_HBO\n                        level: 4\n                        zone_count: 168\n                        matrix_sum: 364.0\n                        interzonal_sum: 360.77429216006425\n                        intrazonal_sum: 3.225707839935766\n                        Comments:\n                        Created by disaggregate_matrix operation on the following matrix:\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: AM_peak_hr\n                            purpose: OB_HBO\n                            level: 4\n                            zone_count: 120\n                            matrix_sum: 364.0\n                            interzonal_sum: 363.0\n                            intrazonal_sum: 1.0\n                            Comments:\n                            Created by copy operation on the following matrix:\n                            [\n                                Matrix Object\n                                vehicle_type: Rail\n                                value_type: Person Trips\n                                time_period: AM_peak_hr\n                                purpose: OB_HBO\n                                level: 4\n                                zone_count: 120\n                                matrix_sum: 364.0\n                                interzonal_sum: 363.0\n                                intrazonal_sum: 1.0\n                                Comments:\n                                Created by operation <built-in function mul> (reverse: False) on\n                                [\n                                    Matrix Object\n                                    vehicle_type: Rail\n                                    value_type: Person Trips\n                                    time_period: AM_peak_hr\n                                    purpose: OB_HBO\n                                    level: 4\n                                    zone_count: 120\n                                    matrix_sum: 364.0\n                                    interzonal_sum: 363.0\n                                    intrazonal_sum: 1.0\n                                    Comments:\n                                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_OB_HBO_Rail.csv\n                                    MND Raw Data\n                                    \n                                ]\n                                <built-in function mul>\n                                [\n                                    1.0\n                                ]\n                                \n                            ]\n                            \n                        ]\n                        \n                    ]\n                    \n                ]\n                Convergence Information:\n                1: count: 168, col_pass: 94, row_pass: 8\n                2: count: 168, col_pass: 95, row_pass: 4\n                3: count: 168, col_pass: 98, row_pass: 4\n                4: count: 168, col_pass: 124, row_pass: 6\n                5: count: 168, col_pass: 127, row_pass: 8\n                6: count: 168, col_pass: 135, row_pass: 32\n                7: count: 168, col_pass: 152, row_pass: 163\n                8: count: 168, col_pass: 153, row_pass: 168\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n<built-in function add>\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: AM_peak_hr\npurpose: NHBW\nlevel: 7\nzone_count: 168\nmatrix_sum: 134.0\ninterzonal_sum: 128.38856642074734\nintrazonal_sum: 5.611433579252669\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: AM_peak_hr\n    purpose: NHBW\n    level: 7\n    zone_count: 168\n    matrix_sum: 134.0\n    interzonal_sum: 128.38856642074734\n    intrazonal_sum: 5.611433579252669\n    Comments:\n    Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: AM_peak_hr\n        purpose: NHBW\n        level: 7\n        zone_count: 168\n        matrix_sum: 134.0\n        interzonal_sum: 132.78111793124762\n        intrazonal_sum: 1.2188820687523887\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: AM_peak_hr\n            purpose: NHBW\n            level: 7\n            zone_count: 168\n            matrix_sum: 134.0\n            interzonal_sum: 132.78111793124762\n            intrazonal_sum: 1.2188820687523887\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: AM_peak_hr\n                purpose: NHBW\n                level: 5\n                zone_count: 168\n                matrix_sum: 134.0\n                interzonal_sum: 132.78111793124762\n                intrazonal_sum: 1.2188820687523887\n                Comments:\n                Created by disaggregate_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: AM_peak_hr\n                    purpose: NHBW\n                    level: 5\n                    zone_count: 120\n                    matrix_sum: 134.0\n                    interzonal_sum: 133.0\n                    intrazonal_sum: 1.0\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: AM_peak_hr\n                        purpose: NHBW\n                        level: 5\n                        zone_count: 120\n                        matrix_sum: 134.0\n                        interzonal_sum: 133.0\n                        intrazonal_sum: 1.0\n                        Comments:\n                        Created by operation <built-in function mul> (reverse: False) on\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: AM_peak_hr\n                            purpose: NHBW\n                            level: 5\n                            zone_count: 120\n                            matrix_sum: 134.0\n                            interzonal_sum: 133.0\n                            intrazonal_sum: 1.0\n                            Comments:\n                            Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_NHBW_Rail.csv\n                            MND Raw Data\n                            \n                        ]\n                        <built-in function mul>\n                        [\n                            1.0\n                        ]\n                        \n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n"}, "json://3": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 3, "_purpose": "Other", "_time_period": "AM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by operation <built-in function add> (reverse: False) on\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: AM_peak_hr\npurpose: Other\nlevel: 5\nzone_count: 168\nmatrix_sum: 256.75486677429495\ninterzonal_sum: 254.06572402336178\nintrazonal_sum: 2.6891427509331773\nComments:\nCreated by operation <built-in function add> (reverse: False) on\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: AM_peak_hr\n    purpose: Other\n    level: 5\n    zone_count: 168\n    matrix_sum: 24.358171000158364\n    interzonal_sum: 24.26922298111352\n    intrazonal_sum: 0.08894801904484556\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: AM_peak_hr\n        purpose: IB_HBO\n        level: 5\n        zone_count: 168\n        matrix_sum: 24.358171000158364\n        interzonal_sum: 24.26922298111352\n        intrazonal_sum: 0.08894801904484556\n        Comments:\n        Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: AM_peak_hr\n            purpose: IB_HBO\n            level: 5\n            zone_count: 168\n            matrix_sum: 24.35817100015836\n            interzonal_sum: 24.200602314985456\n            intrazonal_sum: 0.15756868517290293\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: AM_peak_hr\n                purpose: IB_HBO\n                level: 5\n                zone_count: 168\n                matrix_sum: 24.35817100015836\n                interzonal_sum: 24.200602314985456\n                intrazonal_sum: 0.15756868517290293\n                Comments:\n                Created by furness_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: AM_peak_hr\n                    purpose: IB_HBO\n                    level: 3\n                    zone_count: 168\n                    matrix_sum: 39.0\n                    interzonal_sum: 38.7742939551676\n                    intrazonal_sum: 0.2257060448323995\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: AM_peak_hr\n                        purpose: IB_HBO\n                        level: 3\n                        zone_count: 168\n                        matrix_sum: 39.0\n                        interzonal_sum: 38.7742939551676\n                        intrazonal_sum: 0.2257060448323995\n                        Comments:\n                        Created by disaggregate_matrix operation on the following matrix:\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: AM_peak_hr\n                            purpose: IB_HBO\n                            level: 3\n                            zone_count: 120\n                            matrix_sum: 39.0\n                            interzonal_sum: 38.0\n                            intrazonal_sum: 1.0\n                            Comments:\n                            Created by copy operation on the following matrix:\n                            [\n                                Matrix Object\n                                vehicle_type: Rail\n                                value_type: Person Trips\n                                time_period: AM_peak_hr\n                                purpose: IB_HBO\n                                level: 3\n                                zone_count: 120\n                                matrix_sum: 39.0\n                                interzonal_sum: 38.0\n                                intrazonal_sum: 1.0\n                                Comments:\n                                Created by operation <built-in function mul> (reverse: False) on\n                                [\n                                    Matrix Object\n                                    vehicle_type: Rail\n                                    value_type: Person Trips\n                                    time_period: AM_peak_hr\n                                    purpose: IB_HBO\n                                    level: 3\n                                    zone_count: 120\n                                    matrix_sum: 39.0\n                                    interzonal_sum: 38.0\n                                    intrazonal_sum: 1.0\n                                    Comments:\n                                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_IB_HBO_Rail.csv\n                                    MND Raw Data\n                                    \n                                ]\n                                <built-in function mul>\n                                [\n                                    1.0\n                                ]\n                                \n                            ]\n                            \n                        ]\n                        \n                    ]\n                    \n                ]\n                Convergence Information:\n                1: count: 168, col_pass: 122, row_pass: 118\n                2: count: 168, col_pass: 122, row_pass: 118\n                3: count: 168, col_pass: 122, row_pass: 118\n                4: count: 168, col_pass: 122, row_pass: 118\n                5: count: 168, col_pass: 122, row_pass: 118\n                6: count: 168, col_pass: 122, row_pass: 118\n                7: count: 168, col_pass: 122, row_pass: 118\n                8: count: 168, col_pass: 122, row_pass: 118\n                9: count: 168, col_pass: 122, row_pass: 118\n                10: count: 168, col_pass: 122, row_pass: 118\n                11: count: 168, col_pass: 122, row_pass: 118\n                12: count: 168, col_pass: 122, row_pass: 118\n                13: count: 168, col_pass: 122, row_pass: 118\n                14: count: 168, col_pass: 122, row_pass: 118\n                15: count: 168, col_pass: 122, row_pass: 118\n                16: count: 168, col_pass: 122, row_pass: 118\n                17: count: 168, col_pass: 122, row_pass: 118\n                18: count: 168, col_pass: 122, row_pass: 118\n                19: count: 168, col_pass: 122, row_pass: 118\n                20: count: 168, col_pass: 122, row_pass: 118\n                21: count: 168, col_pass: 122, row_pass: 118\n                22: count: 168, col_pass: 122, row_pass: 118\n                23: count: 168, col_pass: 122, row_pass: 118\n                24: count: 168, col_pass: 122, row_pass: 118\n                25: count: 168, col_pass: 122, row_pass: 118\n                26: count: 168, col_pass: 122, row_pass: 118\n                27: count: 168, col_pass: 122, row_pass: 118\n                28: count: 168, col_pass: 122, row_pass: 118\n                29: count: 168, col_pass: 122, row_pass: 118\n                30: count: 168, col_pass: 122, row_pass: 118\n                31: count: 168, col_pass: 122, row_pass: 118\n                32: count: 168, col_pass: 122, row_pass: 118\n                33: count: 168, col_pass: 122, row_pass: 118\n                34: count: 168, col_pass: 122, row_pass: 118\n                35: count: 168, col_pass: 122, row_pass: 118\n                36: count: 168, col_pass: 122, row_pass: 118\n                37: count: 168, col_pass: 122, row_pass: 118\n                38: count: 168, col_pass: 122, row_pass: 118\n                39: count: 168, col_pass: 122, row_pass: 118\n                40: count: 168, col_pass: 122, row_pass: 118\n                41: count: 168, col_pass: 122, row_pass: 118\n                42: count: 168, col_pass: 122, row_pass: 118\n                43: count: 168, col_pass: 122, row_pass: 118\n                44: count: 168, col_pass: 122, row_pass: 118\n                45: count: 168, col_pass: 122, row_pass: 118\n                46: count: 168, col_pass: 122, row_pass: 118\n                47: count: 168, col_pass: 122, row_pass: 118\n                48: count: 168, col_pass: 122, row_pass: 118\n                49: count: 168, col_pass: 122, row_pass: 118\n                50: count: 168, col_pass: 122, row_pass: 118\n                51: count: 168, col_pass: 122, row_pass: 118\n                52: count: 168, col_pass: 122, row_pass: 118\n                53: count: 168, col_pass: 122, row_pass: 118\n                54: count: 168, col_pass: 122, row_pass: 118\n                55: count: 168, col_pass: 122, row_pass: 118\n                56: count: 168, col_pass: 122, row_pass: 118\n                57: count: 168, col_pass: 122, row_pass: 118\n                58: count: 168, col_pass: 122, row_pass: 118\n                59: count: 168, col_pass: 122, row_pass: 118\n                60: count: 168, col_pass: 122, row_pass: 118\n                61: count: 168, col_pass: 122, row_pass: 118\n                62: count: 168, col_pass: 122, row_pass: 118\n                63: count: 168, col_pass: 122, row_pass: 118\n                64: count: 168, col_pass: 122, row_pass: 118\n                65: count: 168, col_pass: 122, row_pass: 118\n                66: count: 168, col_pass: 122, row_pass: 118\n                67: count: 168, col_pass: 122, row_pass: 118\n                68: count: 168, col_pass: 122, row_pass: 118\n                69: count: 168, col_pass: 122, row_pass: 118\n                70: count: 168, col_pass: 122, row_pass: 118\n                71: count: 168, col_pass: 122, row_pass: 118\n                72: count: 168, col_pass: 122, row_pass: 118\n                73: count: 168, col_pass: 122, row_pass: 118\n                74: count: 168, col_pass: 122, row_pass: 118\n                75: count: 168, col_pass: 122, row_pass: 118\n                76: count: 168, col_pass: 122, row_pass: 118\n                77: count: 168, col_pass: 122, row_pass: 118\n                78: count: 168, col_pass: 122, row_pass: 118\n                79: count: 168, col_pass: 122, row_pass: 118\n                80: count: 168, col_pass: 122, row_pass: 118\n                81: count: 168, col_pass: 122, row_pass: 118\n                82: count: 168, col_pass: 122, row_pass: 118\n                83: count: 168, col_pass: 122, row_pass: 118\n                84: count: 168, col_pass: 122, row_pass: 118\n                85: count: 168, col_pass: 122, row_pass: 118\n                86: count: 168, col_pass: 122, row_pass: 118\n                87: count: 168, col_pass: 122, row_pass: 118\n                88: count: 168, col_pass: 122, row_pass: 118\n                89: count: 168, col_pass: 122, row_pass: 118\n                90: count: 168, col_pass: 122, row_pass: 118\n                91: count: 168, col_pass: 122, row_pass: 118\n                92: count: 168, col_pass: 122, row_pass: 118\n                93: count: 168, col_pass: 122, row_pass: 118\n                94: count: 168, col_pass: 122, row_pass: 118\n                95: count: 168, col_pass: 122, row_pass: 118\n                96: count: 168, col_pass: 122, row_pass: 118\n                97: count: 168, col_pass: 122, row_pass: 118\n                98: count: 168, col_pass: 122, row_pass: 118\n                99: count: 168, col_pass: 122, row_pass: 118\n                100: count: 168, col_pass: 122, row_pass: 118\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n<built-in function add>\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: AM_peak_hr\n    purpose: OB_HBO\n    level: 6\n    zone_count: 168\n    matrix_sum: 232.39669577413662\n    interzonal_sum: 229.79650104224828\n    intrazonal_sum: 2.6001947318883314\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: AM_peak_hr\n        purpose: OB_HBO\n        level: 6\n        zone_count: 168\n        matrix_sum: 232.39669577413662\n        interzonal_sum: 229.79650104224828\n        intrazonal_sum: 2.6001947318883314\n        Comments:\n        Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: AM_peak_hr\n            purpose: OB_HBO\n            level: 6\n            zone_count: 168\n            matrix_sum: 232.3966957741366\n            interzonal_sum: 230.87156062143575\n            intrazonal_sum: 1.525135152700829\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: AM_peak_hr\n                purpose: OB_HBO\n                level: 6\n                zone_count: 168\n                matrix_sum: 232.3966957741366\n                interzonal_sum: 230.87156062143575\n                intrazonal_sum: 1.525135152700829\n                Comments:\n                Created by furness_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: AM_peak_hr\n                    purpose: OB_HBO\n                    level: 4\n                    zone_count: 168\n                    matrix_sum: 364.0\n                    interzonal_sum: 360.77429216006425\n                    intrazonal_sum: 3.225707839935766\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: AM_peak_hr\n                        purpose: OB_HBO\n                        level: 4\n                        zone_count: 168\n                        matrix_sum: 364.0\n                        interzonal_sum: 360.77429216006425\n                        intrazonal_sum: 3.225707839935766\n                        Comments:\n                        Created by disaggregate_matrix operation on the following matrix:\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: AM_peak_hr\n                            purpose: OB_HBO\n                            level: 4\n                            zone_count: 120\n                            matrix_sum: 364.0\n                            interzonal_sum: 363.0\n                            intrazonal_sum: 1.0\n                            Comments:\n                            Created by copy operation on the following matrix:\n                            [\n                                Matrix Object\n                                vehicle_type: Rail\n                                value_type: Person Trips\n                                time_period: AM_peak_hr\n                                purpose: OB_HBO\n                                level: 4\n                                zone_count: 120\n                                matrix_sum: 364.0\n                                interzonal_sum: 363.0\n                                intrazonal_sum: 1.0\n                                Comments:\n                                Created by operation <built-in function mul> (reverse: False) on\n                                [\n                                    Matrix Object\n                                    vehicle_type: Rail\n                                    value_type: Person Trips\n                                    time_period: AM_peak_hr\n                                    purpose: OB_HBO\n                                    level: 4\n                                    zone_count: 120\n                                    matrix_sum: 364.0\n                                    interzonal_sum: 363.0\n                                    intrazonal_sum: 1.0\n                                    Comments:\n                                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_OB_HBO_Rail.csv\n                                    MND Raw Data\n                                    \n                                ]\n                                <built-in function mul>\n                                [\n                                    1.0\n                                ]\n                                \n                            ]\n                            \n                        ]\n                        \n                    ]\n                    \n                ]\n                Convergence Information:\n                1: count: 168, col_pass: 93, row_pass: 7\n                2: count: 168, col_pass: 96, row_pass: 8\n                3: count: 168, col_pass: 93, row_pass: 9\n                4: count: 168, col_pass: 94, row_pass: 29\n                5: count: 168, col_pass: 98, row_pass: 51\n                6: count: 168, col_pass: 121, row_pass: 163\n                7: count: 168, col_pass: 121, row_pass: 163\n                8: count: 168, col_pass: 151, row_pass: 167\n                9: count: 168, col_pass: 153, row_pass: 168\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n<built-in function add>\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: AM_peak_hr\npurpose: NHBO\nlevel: 8\nzone_count: 168\nmatrix_sum: 178.0\ninterzonal_sum: 177.72710130298069\nintrazonal_sum: 0.27289869701930974\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: AM_peak_hr\n    purpose: NHBO\n    level: 8\n    zone_count: 168\n    matrix_sum: 178.0\n    interzonal_sum: 177.72710130298069\n    intrazonal_sum: 0.27289869701930974\n    Comments:\n    Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: AM_peak_hr\n        purpose: NHBO\n        level: 8\n        zone_count: 168\n        matrix_sum: 177.99999999999997\n        interzonal_sum: 177.78111762245277\n        intrazonal_sum: 0.21888237754720338\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: AM_peak_hr\n            purpose: NHBO\n            level: 8\n            zone_count: 168\n            matrix_sum: 177.99999999999997\n            interzonal_sum: 177.78111762245277\n            intrazonal_sum: 0.21888237754720338\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: AM_peak_hr\n                purpose: NHBO\n                level: 6\n                zone_count: 168\n                matrix_sum: 177.99999999999997\n                interzonal_sum: 177.78111762245277\n                intrazonal_sum: 0.21888237754720338\n                Comments:\n                Created by disaggregate_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: AM_peak_hr\n                    purpose: NHBO\n                    level: 6\n                    zone_count: 120\n                    matrix_sum: 178.0\n                    interzonal_sum: 177.0\n                    intrazonal_sum: 1.0\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: AM_peak_hr\n                        purpose: NHBO\n                        level: 6\n                        zone_count: 120\n                        matrix_sum: 178.0\n                        interzonal_sum: 177.0\n                        intrazonal_sum: 1.0\n                        Comments:\n                        Created by operation <built-in function mul> (reverse: False) on\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: AM_peak_hr\n                            purpose: NHBO\n                            level: 6\n                            zone_count: 120\n                            matrix_sum: 178.0\n                            interzonal_sum: 177.0\n                            intrazonal_sum: 1.0\n                            Comments:\n                            Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_NHBO_Rail.csv\n                            MND Raw Data\n                            \n                        ]\n                        <built-in function mul>\n                        [\n                            1.0\n                        ]\n                        \n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n"}}}