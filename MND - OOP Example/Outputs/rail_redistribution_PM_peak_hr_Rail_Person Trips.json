{"py/object": "matrix_class_v2.MatrixStack", "_name": "rail_redistribution", "_vehicle_type": "Rail", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"json://501": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 501, "_targets": {"json://501": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://502": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 502, "_targets": {"json://502": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://504": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 504, "_targets": {"json://504": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://505": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 505, "_targets": {"json://505": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://506": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 506, "_targets": {"json://506": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://509": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 509, "_targets": {"json://509": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://511": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 511, "_targets": {"json://511": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://512": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 512, "_targets": {"json://512": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://513": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 513, "_targets": {"json://513": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://514": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 514, "_targets": {"json://514": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://515": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 515, "_targets": {"json://515": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://516": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 516, "_targets": {"json://516": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://517": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 517, "_targets": {"json://517": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://519": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 519, "_targets": {"json://519": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://520": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 520, "_targets": {"json://520": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://521": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 521, "_targets": {"json://521": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://523": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 523, "_targets": {"json://523": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://524": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 524, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://525": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 525, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://526": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 526, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://527": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 527, "_targets": {"json://527": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://528": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 528, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://531": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 531, "_targets": {"json://531": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://532": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 532, "_targets": {"json://532": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://533": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 533, "_targets": {"json://533": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://534": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 534, "_targets": {"json://534": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://535": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 535, "_targets": {"json://535": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://536": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 536, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://537": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 537, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://538": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 538, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://539": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 539, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://540": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 540, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://541": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 541, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://542": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 542, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://543": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 543, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://544": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 544, "_targets": {"json://544": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://545": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 545, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://546": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 546, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://547": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 547, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://548": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 548, "_targets": {"json://548": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://551": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 551, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://562": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 562, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://566": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 566, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://567": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 567, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://570": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 570, "_targets": {"json://570": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://571": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 571, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://572": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 572, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://573": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 573, "_targets": {"json://573": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://601": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 601, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://602": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 602, "_targets": {"json://602": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://603": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 603, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://604": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 604, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://605": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 605, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://606": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 606, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://607": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 607, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://608": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 608, "_targets": {"json://608": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://609": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 609, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://610": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 610, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5001": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5001, "_targets": {"json://9009": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5002": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5002, "_targets": {"json://5002": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5003": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5003, "_targets": {"json://5003": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5004": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5004, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5005": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5005, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7105265186923027}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.2894734813076974}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5006": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5006, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.6336305213085214}, "json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.3663694786914786}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5007": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5007, "_targets": {"json://5007": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5008": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5008, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5009": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5009, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.12574033987473257}, "json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8742596601252675}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5010": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5010, "_targets": {"json://5010": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5011": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5011, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5012": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5012, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5013": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5013, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5014": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5014, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5015": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5015, "_targets": {"json://5015": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5016": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5016, "_targets": {"json://5019": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.23915238262142025}, "json://5133": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7608476173785798}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5017": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5017, "_targets": {"json://5068": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5018": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5018, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5019": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5019, "_targets": {"json://5133": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7224258444377175}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5020": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5020, "_targets": {"json://5020": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5021": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5021, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5022": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5022, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5023": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5023, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.16270700178727196}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8372929982127281}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5024": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5024, "_targets": {"json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5025": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5025, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.5924220607039576}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.40757793929604236}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5026": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5026, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5027": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5027, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5028": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5028, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8675205867701657}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.13247941322983423}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5029": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5029, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.5147106005829688}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.48528939941703114}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5030": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5030, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.38833292989011636}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.6116670701098836}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5031": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5031, "_targets": {"json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9863284020535221}, "json://5133": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.013671597946477902}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5032": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5032, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5033": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5033, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5034": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5034, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5035": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5035, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5036": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5036, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5037": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5037, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5038": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5038, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5039": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5039, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5040": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5040, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5041": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5041, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5042": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5042, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5043": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5043, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5045": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5045, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5046": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5046, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5047": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5047, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5048": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5048, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5049": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5049, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5050": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5050, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5051": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5051, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5052": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5052, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5053": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5053, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5054": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5054, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5055": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5055, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5056": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5056, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5065": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5065, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5067": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5067, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.06201399661995637}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9379860033800437}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5068": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5068, "_targets": {"json://5068": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5069": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5069, "_targets": {"json://5069": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5070": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5070, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5100": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5100, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5101": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5101, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5102": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5102, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5103": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5103, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5104": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5104, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5105": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5105, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5106": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5106, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5107": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5107, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.29235456942551624}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7076454305744838}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5108": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5108, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5109": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5109, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5110": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5110, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7387638702178395}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.26123612978216043}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5111": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5111, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.2515912022033352}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7484087977966648}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5112": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5112, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5115": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5115, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.22736056963670478}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7726394303632952}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5116": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5116, "_targets": {"json://5116": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5117": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5117, "_targets": {"json://5139": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.28054378071849867}, "json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7194562192815013}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5118": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5118, "_targets": {"json://5118": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5119": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5119, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5120": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5120, "_targets": {"json://5121": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5121": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5121, "_targets": {"json://5121": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5122": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5122, "_targets": {"json://5122": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5124": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5124, "_targets": {"json://5122": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.4437572194572055}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5125": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5125, "_targets": {"json://5124": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.13644820554642537}, "json://5003": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8635517944535747}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5126": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5126, "_targets": {"json://5132": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5127": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5127, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5128": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5128, "_targets": {"json://5132": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.028333630736165107}, "json://5003": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9716663692638349}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5129": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5129, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.11436485547237808}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8856351445276219}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5130": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5130, "_targets": {"json://5132": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.29984251486319297}, "json://5003": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7001574851368071}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5131": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5131, "_targets": {"json://5131": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5132": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5132, "_targets": {"json://5132": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5133": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5133, "_targets": {"json://5133": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5134": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5134, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.32382409830106296}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.676175901698937}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5135": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5135, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.08645655874211541}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9135434412578846}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5136": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5136, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.239089678008408}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5137": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5137, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5138": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5138, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5139": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5139, "_targets": {"json://5068": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5140": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5140, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5141": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5141, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.2216693993246311}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.778330600675369}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5142": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5142, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.026609684324048147}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9733903156759518}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5143": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5143, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.0716213365076186}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9283786634923814}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9001": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9001, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9002": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9002, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9003": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9003, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9004": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9004, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9005": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9005, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9006": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9006, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9007": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9007, "_targets": {"json://9009": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9008": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9008, "_targets": {"json://9009": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9009": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9009, "_targets": {"json://9009": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}}}, "_zones": {"py/object": "pandas.core.frame.DataFrame", "comp": true, "values": "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", "txt": false, "meta": {"dtypes": {"index": "int64", "mnd_zone": "int64", "x_coord": "int64", "y_coord": "int64", "area_ref": "object", "sector": "int64", "msoa": "object", "district": "object", "Urban city and town": "int64", "Rural village": "int64", "Rural hamlets and isolated dwellings": "int64", "Rural town and fringe": "int64", "Rural village in a sparse setting": "int64", "Rural hamlets and isolated dwellings in a sparse setting": "int64", "Rural town and fringe in a sparse setting": "int64", "urbanrural": "object", "cordon_inner": "object", "cordon_outer": "object", "Internal": "bool"}, "index": "{\"py/object\": \"pandas.core.indexes.numeric.Int64Index\", \"comp\": true, \"values\": \"eJwtk8FtRSEQA1tJATnYsMCnlij9txE8m4ulp7VXMPj9LPn7a2lEKrIiO3KfOFNn6hmJxbE4Fp9IfEORmEd8I74R34hvxDc+T2YsM/tmfDO+Gd+Mb8Y38WVpZWklUUlUEpVEJVFJVBKVxIpvx7cz2BmcLDgZnAzOW7Bz3537bvFZkRXZkRP5RN4JtrNAjagZJfQUVM2qYSX49IPm8OosAAVBgVAwFBAFRYFRJgtNgVOjn4YsWAVXAVaQFWgFWw2ykyygBWmBWrAWsAVtgVvwFsAFcYFc1Z0gC3BBXCAXzFWkFikeQIvUIrW6UGQX2d3tYsNmw2YDD2W1UjloG9qGtqFtaBvahrb/e0q269p97Zp2T7uoEDaEDWGPrjd+2Bq2hq1ha9gatoatYevZfwUnhK1ha9gatoatYWvYGraGrcP20q5Luy7turTr0q5Luy7turTr6f39AzjkrWM=\", \"txt\": false, \"meta\": {\"dtype\": \"int64\", \"name\": \"reference\"}}", "column_level_names": [null], "header": [0]}}, "_source_file": {"py/reduce": [{"py/type": "pathlib.WindowsPath"}, {"py/tuple": ["C:\\", "Users", "UKTMB001", "Documents", "Python Scripts", "MND", "ZoningTemplate_Model_v2.xlsx"]}]}, "_source_sheet": "zones"}, "_time_period": "PM_peak_hr", "_value_type": "Person Trips", "_levels": {"json://1": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 1, "_purpose": "IB_HBW", "_time_period": "PM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: PM_peak_hr\npurpose: IB_HBW\nlevel: 1\nzone_count: 168\nmatrix_sum: 379.0\ninterzonal_sum: 375.56872217607577\nintrazonal_sum: 3.4312778239242165\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: PM_peak_hr\n    purpose: IB_HBW\n    level: 1\n    zone_count: 168\n    matrix_sum: 379.0\n    interzonal_sum: 375.56872217607577\n    intrazonal_sum: 3.4312778239242165\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: PM_peak_hr\n        purpose: IB_HBW\n        level: 1\n        zone_count: 168\n        matrix_sum: 379.0\n        interzonal_sum: 375.56872217607577\n        intrazonal_sum: 3.4312778239242165\n        Comments:\n        Created by disaggregate_matrix operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: PM_peak_hr\n            purpose: IB_HBW\n            level: 1\n            zone_count: 120\n            matrix_sum: 379.0\n            interzonal_sum: 377.0\n            intrazonal_sum: 2.0\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: PM_peak_hr\n                purpose: IB_HBW\n                level: 1\n                zone_count: 120\n                matrix_sum: 379.0\n                interzonal_sum: 377.0\n                intrazonal_sum: 2.0\n                Comments:\n                Created by operation <built-in function mul> (reverse: False) on\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: PM_peak_hr\n                    purpose: IB_HBW\n                    level: 1\n                    zone_count: 120\n                    matrix_sum: 379.0\n                    interzonal_sum: 377.0\n                    intrazonal_sum: 2.0\n                    Comments:\n                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_IB_HBW_Rail.csv\n                    MND Raw Data\n                    \n                ]\n                <built-in function mul>\n                [\n                    1.0\n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n"}, "json://2": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "eJzt3ElIVWEUAGApKipSwhCkRRAFUUrZsAjiXZFojgpJiyKLWmglWWitQmiyTdQmKCiDxBxS0IXhosEBsqzMdFFBIFnRQBatGkRt5yZsIfaePb9v+18u594D/4Vzz39iYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGI6a5Mr5T6esCiIdB8BoF5e25/P3SfVh2y+fpNzKyylusD9HufjLu7bUT18T/JhxqObz5PIxl+/W59lHOnuqQksnVP68t/l9kLCsKmvFuspQpOMCAAAAAAAAABiturO6Ds/LLxvsM0mZeP1sU+emP/pOCjtTiy8VnQvOHDx/Y0PBniD/U/zVxnFHh92fMn5Hdf6bhhfBvAfHT7XPvTPkfWbeLfy4b+vpwfWCA8kJXUUrh7x+b/D6Q3/8xcH1zAklu39c2Bm1fTS9rQtq25sbg/Kn1d3dcc1R+5wj7di1Jcvrpt32vgAAAAAA4C8e9uzf1jSxST0dAAAAAIgaN1Y2XznR/jZs8wkXZWxcHfutVZ01Sv1Ku3k8I6lWfmEEPc4bqP+yvsIcWcaEnNyOZ3NaSkPpLW2xfQNffU8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARqnZr17WJV4oCyIdBwAAABA5j/MG6r+srwhFOg4Ih5zcjmdzWkpD6S1tsX0DX9XFAAAAAAAAAAAAAAAAAMaYl6vHZScm9IbtXOXaWU2PSopeO88WpeJe9GdO3X5ffgEAAAAAAIAx62RF6u3QwhT/TQEAAAAAAAAAAAAAAAAAAADgP5SU/25xad9H80PgH/gNcRWXvQ==", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 2, "_purpose": "OB_HBW", "_time_period": "PM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: PM_peak_hr\npurpose: OB_HBW\nlevel: 2\nzone_count: 168\nmatrix_sum: 6.0\ninterzonal_sum: 6.0\nintrazonal_sum: 0.0\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: PM_peak_hr\n    purpose: OB_HBW\n    level: 2\n    zone_count: 168\n    matrix_sum: 6.0\n    interzonal_sum: 6.0\n    intrazonal_sum: 0.0\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: PM_peak_hr\n        purpose: OB_HBW\n        level: 2\n        zone_count: 168\n        matrix_sum: 6.0\n        interzonal_sum: 6.0\n        intrazonal_sum: 0.0\n        Comments:\n        Created by disaggregate_matrix operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: PM_peak_hr\n            purpose: OB_HBW\n            level: 2\n            zone_count: 120\n            matrix_sum: 6.0\n            interzonal_sum: 6.0\n            intrazonal_sum: 0.0\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: PM_peak_hr\n                purpose: OB_HBW\n                level: 2\n                zone_count: 120\n                matrix_sum: 6.0\n                interzonal_sum: 6.0\n                intrazonal_sum: 0.0\n                Comments:\n                Created by operation <built-in function mul> (reverse: False) on\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: PM_peak_hr\n                    purpose: OB_HBW\n                    level: 2\n                    zone_count: 120\n                    matrix_sum: 6.0\n                    interzonal_sum: 6.0\n                    intrazonal_sum: 0.0\n                    Comments:\n                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_OB_HBW_Rail.csv\n                    MND Raw Data\n                    \n                ]\n                <built-in function mul>\n                [\n                    1.0\n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n"}, "json://3": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 3, "_purpose": "IB_HBEmp", "_time_period": "PM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: PM_peak_hr\npurpose: IB_HBEmp\nlevel: 3\nzone_count: 168\nmatrix_sum: 100.94330768069372\ninterzonal_sum: 100.65592371980048\nintrazonal_sum: 0.287383960893234\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: PM_peak_hr\n    purpose: IB_HBEmp\n    level: 3\n    zone_count: 168\n    matrix_sum: 100.94330768069372\n    interzonal_sum: 100.65592371980048\n    intrazonal_sum: 0.287383960893234\n    Comments:\n    Created by furness_matrix operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: PM_peak_hr\n        purpose: IB_HBO\n        level: 3\n        zone_count: 168\n        matrix_sum: 424.00000000000006\n        interzonal_sum: 421.3228816821991\n        intrazonal_sum: 2.6771183178009266\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: PM_peak_hr\n            purpose: IB_HBO\n            level: 3\n            zone_count: 168\n            matrix_sum: 424.00000000000006\n            interzonal_sum: 421.3228816821991\n            intrazonal_sum: 2.6771183178009266\n            Comments:\n            Created by disaggregate_matrix operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: PM_peak_hr\n                purpose: IB_HBO\n                level: 3\n                zone_count: 120\n                matrix_sum: 424.0\n                interzonal_sum: 421.0\n                intrazonal_sum: 3.0\n                Comments:\n                Created by copy operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: PM_peak_hr\n                    purpose: IB_HBO\n                    level: 3\n                    zone_count: 120\n                    matrix_sum: 424.0\n                    interzonal_sum: 421.0\n                    intrazonal_sum: 3.0\n                    Comments:\n                    Created by operation <built-in function mul> (reverse: False) on\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: PM_peak_hr\n                        purpose: IB_HBO\n                        level: 3\n                        zone_count: 120\n                        matrix_sum: 424.0\n                        interzonal_sum: 421.0\n                        intrazonal_sum: 3.0\n                        Comments:\n                        Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_IB_HBO_Rail.csv\n                        MND Raw Data\n                        \n                    ]\n                    <built-in function mul>\n                    [\n                        1.0\n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    Convergence Information:\n    1: count: 168, col_pass: 32, row_pass: 61\n    2: count: 168, col_pass: 22, row_pass: 60\n    3: count: 168, col_pass: 22, row_pass: 76\n    4: count: 168, col_pass: 23, row_pass: 78\n    5: count: 168, col_pass: 39, row_pass: 82\n    6: count: 168, col_pass: 39, row_pass: 90\n    7: count: 168, col_pass: 49, row_pass: 110\n    8: count: 168, col_pass: 160, row_pass: 119\n    9: count: 168, col_pass: 168, row_pass: 168\n    \n]\n\n]\n"}, "json://4": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "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", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 4, "_purpose": "OB_HBEmp", "_time_period": "PM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: PM_peak_hr\npurpose: OB_HBEmp\nlevel: 4\nzone_count: 168\nmatrix_sum: 19.651378078350774\ninterzonal_sum: 19.57580416937806\nintrazonal_sum: 0.07557390897271418\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: PM_peak_hr\n    purpose: OB_HBEmp\n    level: 4\n    zone_count: 168\n    matrix_sum: 19.651378078350774\n    interzonal_sum: 19.57580416937806\n    intrazonal_sum: 0.07557390897271418\n    Comments:\n    Created by furness_matrix operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: PM_peak_hr\n        purpose: OB_HBO\n        level: 4\n        zone_count: 168\n        matrix_sum: 87.0\n        interzonal_sum: 86.22218816515077\n        intrazonal_sum: 0.7778118348492377\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: PM_peak_hr\n            purpose: OB_HBO\n            level: 4\n            zone_count: 168\n            matrix_sum: 87.0\n            interzonal_sum: 86.22218816515077\n            intrazonal_sum: 0.7778118348492377\n            Comments:\n            Created by disaggregate_matrix operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: PM_peak_hr\n                purpose: OB_HBO\n                level: 4\n                zone_count: 120\n                matrix_sum: 87.0\n                interzonal_sum: 85.0\n                intrazonal_sum: 2.0\n                Comments:\n                Created by copy operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: PM_peak_hr\n                    purpose: OB_HBO\n                    level: 4\n                    zone_count: 120\n                    matrix_sum: 87.0\n                    interzonal_sum: 85.0\n                    intrazonal_sum: 2.0\n                    Comments:\n                    Created by operation <built-in function mul> (reverse: False) on\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: PM_peak_hr\n                        purpose: OB_HBO\n                        level: 4\n                        zone_count: 120\n                        matrix_sum: 87.0\n                        interzonal_sum: 85.0\n                        intrazonal_sum: 2.0\n                        Comments:\n                        Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_OB_HBO_Rail.csv\n                        MND Raw Data\n                        \n                    ]\n                    <built-in function mul>\n                    [\n                        1.0\n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    Convergence Information:\n    1: count: 168, col_pass: 86, row_pass: 123\n    2: count: 168, col_pass: 87, row_pass: 124\n    3: count: 168, col_pass: 104, row_pass: 110\n    4: count: 168, col_pass: 102, row_pass: 109\n    5: count: 168, col_pass: 99, row_pass: 110\n    6: count: 168, col_pass: 101, row_pass: 111\n    7: count: 168, col_pass: 102, row_pass: 112\n    8: count: 168, col_pass: 106, row_pass: 113\n    9: count: 168, col_pass: 112, row_pass: 148\n    10: count: 168, col_pass: 134, row_pass: 148\n    11: count: 168, col_pass: 135, row_pass: 150\n    12: count: 168, col_pass: 135, row_pass: 150\n    13: count: 168, col_pass: 135, row_pass: 153\n    14: count: 168, col_pass: 135, row_pass: 153\n    15: count: 168, col_pass: 135, row_pass: 153\n    16: count: 168, col_pass: 166, row_pass: 153\n    17: count: 168, col_pass: 166, row_pass: 168\n    \n]\n\n]\n"}, "json://5": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 5, "_purpose": "IB_HBO", "_time_period": "PM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: PM_peak_hr\npurpose: IB_HBO\nlevel: 5\nzone_count: 168\nmatrix_sum: 323.0245909485739\ninterzonal_sum: 320.89961107223587\nintrazonal_sum: 2.124979876338017\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: PM_peak_hr\n    purpose: IB_HBO\n    level: 5\n    zone_count: 168\n    matrix_sum: 323.0245909485739\n    interzonal_sum: 320.89961107223587\n    intrazonal_sum: 2.124979876338017\n    Comments:\n    Created by furness_matrix operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: PM_peak_hr\n        purpose: IB_HBO\n        level: 3\n        zone_count: 168\n        matrix_sum: 424.00000000000006\n        interzonal_sum: 421.3228816821991\n        intrazonal_sum: 2.6771183178009266\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: PM_peak_hr\n            purpose: IB_HBO\n            level: 3\n            zone_count: 168\n            matrix_sum: 424.00000000000006\n            interzonal_sum: 421.3228816821991\n            intrazonal_sum: 2.6771183178009266\n            Comments:\n            Created by disaggregate_matrix operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: PM_peak_hr\n                purpose: IB_HBO\n                level: 3\n                zone_count: 120\n                matrix_sum: 424.0\n                interzonal_sum: 421.0\n                intrazonal_sum: 3.0\n                Comments:\n                Created by copy operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: PM_peak_hr\n                    purpose: IB_HBO\n                    level: 3\n                    zone_count: 120\n                    matrix_sum: 424.0\n                    interzonal_sum: 421.0\n                    intrazonal_sum: 3.0\n                    Comments:\n                    Created by operation <built-in function mul> (reverse: False) on\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: PM_peak_hr\n                        purpose: IB_HBO\n                        level: 3\n                        zone_count: 120\n                        matrix_sum: 424.0\n                        interzonal_sum: 421.0\n                        intrazonal_sum: 3.0\n                        Comments:\n                        Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_IB_HBO_Rail.csv\n                        MND Raw Data\n                        \n                    ]\n                    <built-in function mul>\n                    [\n                        1.0\n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    Convergence Information:\n    1: count: 168, col_pass: 34, row_pass: 64\n    2: count: 168, col_pass: 25, row_pass: 65\n    3: count: 168, col_pass: 46, row_pass: 66\n    4: count: 168, col_pass: 73, row_pass: 108\n    5: count: 168, col_pass: 158, row_pass: 115\n    6: count: 168, col_pass: 158, row_pass: 119\n    7: count: 168, col_pass: 168, row_pass: 168\n    \n]\n\n]\n"}, "json://6": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "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", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 6, "_purpose": "OB_HBO", "_time_period": "PM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: PM_peak_hr\npurpose: OB_HBO\nlevel: 6\nzone_count: 168\nmatrix_sum: 67.33013978488125\ninterzonal_sum: 66.6316110196654\nintrazonal_sum: 0.698528765215848\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: PM_peak_hr\n    purpose: OB_HBO\n    level: 6\n    zone_count: 168\n    matrix_sum: 67.33013978488125\n    interzonal_sum: 66.6316110196654\n    intrazonal_sum: 0.698528765215848\n    Comments:\n    Created by furness_matrix operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: PM_peak_hr\n        purpose: OB_HBO\n        level: 4\n        zone_count: 168\n        matrix_sum: 87.0\n        interzonal_sum: 86.22218816515077\n        intrazonal_sum: 0.7778118348492377\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: PM_peak_hr\n            purpose: OB_HBO\n            level: 4\n            zone_count: 168\n            matrix_sum: 87.0\n            interzonal_sum: 86.22218816515077\n            intrazonal_sum: 0.7778118348492377\n            Comments:\n            Created by disaggregate_matrix operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: PM_peak_hr\n                purpose: OB_HBO\n                level: 4\n                zone_count: 120\n                matrix_sum: 87.0\n                interzonal_sum: 85.0\n                intrazonal_sum: 2.0\n                Comments:\n                Created by copy operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: PM_peak_hr\n                    purpose: OB_HBO\n                    level: 4\n                    zone_count: 120\n                    matrix_sum: 87.0\n                    interzonal_sum: 85.0\n                    intrazonal_sum: 2.0\n                    Comments:\n                    Created by operation <built-in function mul> (reverse: False) on\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: PM_peak_hr\n                        purpose: OB_HBO\n                        level: 4\n                        zone_count: 120\n                        matrix_sum: 87.0\n                        interzonal_sum: 85.0\n                        intrazonal_sum: 2.0\n                        Comments:\n                        Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_OB_HBO_Rail.csv\n                        MND Raw Data\n                        \n                    ]\n                    <built-in function mul>\n                    [\n                        1.0\n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    Convergence Information:\n    1: count: 168, col_pass: 86, row_pass: 119\n    2: count: 168, col_pass: 135, row_pass: 123\n    3: count: 168, col_pass: 159, row_pass: 144\n    4: count: 168, col_pass: 167, row_pass: 166\n    5: count: 168, col_pass: 168, row_pass: 168\n    \n]\n\n]\n"}, "json://7": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "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", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 7, "_purpose": "NHBW", "_time_period": "PM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: PM_peak_hr\npurpose: NHBW\nlevel: 7\nzone_count: 168\nmatrix_sum: 110.0\ninterzonal_sum: 109.56223570809782\nintrazonal_sum: 0.4377642919021845\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: PM_peak_hr\n    purpose: NHBW\n    level: 7\n    zone_count: 168\n    matrix_sum: 110.0\n    interzonal_sum: 109.56223570809782\n    intrazonal_sum: 0.4377642919021845\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: PM_peak_hr\n        purpose: NHBW\n        level: 5\n        zone_count: 168\n        matrix_sum: 110.0\n        interzonal_sum: 109.56223570809782\n        intrazonal_sum: 0.4377642919021845\n        Comments:\n        Created by disaggregate_matrix operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: PM_peak_hr\n            purpose: NHBW\n            level: 5\n            zone_count: 120\n            matrix_sum: 110.0\n            interzonal_sum: 108.0\n            intrazonal_sum: 2.0\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: PM_peak_hr\n                purpose: NHBW\n                level: 5\n                zone_count: 120\n                matrix_sum: 110.0\n                interzonal_sum: 108.0\n                intrazonal_sum: 2.0\n                Comments:\n                Created by operation <built-in function mul> (reverse: False) on\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: PM_peak_hr\n                    purpose: NHBW\n                    level: 5\n                    zone_count: 120\n                    matrix_sum: 110.0\n                    interzonal_sum: 108.0\n                    intrazonal_sum: 2.0\n                    Comments:\n                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_NHBW_Rail.csv\n                    MND Raw Data\n                    \n                ]\n                <built-in function mul>\n                [\n                    1.0\n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n"}, "json://8": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 8, "_purpose": "NHBO", "_time_period": "PM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: PM_peak_hr\npurpose: NHBO\nlevel: 8\nzone_count: 168\nmatrix_sum: 192.0\ninterzonal_sum: 191.22237532348862\nintrazonal_sum: 0.7776246765113847\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: PM_peak_hr\n    purpose: NHBO\n    level: 8\n    zone_count: 168\n    matrix_sum: 192.0\n    interzonal_sum: 191.22237532348862\n    intrazonal_sum: 0.7776246765113847\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: PM_peak_hr\n        purpose: NHBO\n        level: 6\n        zone_count: 168\n        matrix_sum: 192.0\n        interzonal_sum: 191.22237532348862\n        intrazonal_sum: 0.7776246765113847\n        Comments:\n        Created by disaggregate_matrix operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: PM_peak_hr\n            purpose: NHBO\n            level: 6\n            zone_count: 120\n            matrix_sum: 192.0\n            interzonal_sum: 190.0\n            intrazonal_sum: 2.0\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: PM_peak_hr\n                purpose: NHBO\n                level: 6\n                zone_count: 120\n                matrix_sum: 192.0\n                interzonal_sum: 190.0\n                intrazonal_sum: 2.0\n                Comments:\n                Created by operation <built-in function mul> (reverse: False) on\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: PM_peak_hr\n                    purpose: NHBO\n                    level: 6\n                    zone_count: 120\n                    matrix_sum: 192.0\n                    interzonal_sum: 190.0\n                    intrazonal_sum: 2.0\n                    Comments:\n                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_NHBO_Rail.csv\n                    MND Raw Data\n                    \n                ]\n                <built-in function mul>\n                [\n                    1.0\n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n"}}}