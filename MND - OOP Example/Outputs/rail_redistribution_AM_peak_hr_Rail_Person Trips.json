{"py/object": "matrix_class_v2.MatrixStack", "_name": "rail_redistribution", "_vehicle_type": "Rail", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"json://501": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 501, "_targets": {"json://501": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://502": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 502, "_targets": {"json://502": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://504": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 504, "_targets": {"json://504": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://505": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 505, "_targets": {"json://505": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://506": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 506, "_targets": {"json://506": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://509": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 509, "_targets": {"json://509": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://511": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 511, "_targets": {"json://511": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://512": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 512, "_targets": {"json://512": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://513": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 513, "_targets": {"json://513": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://514": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 514, "_targets": {"json://514": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://515": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 515, "_targets": {"json://515": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://516": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 516, "_targets": {"json://516": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://517": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 517, "_targets": {"json://517": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://519": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 519, "_targets": {"json://519": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://520": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 520, "_targets": {"json://520": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://521": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 521, "_targets": {"json://521": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://523": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 523, "_targets": {"json://523": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://524": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 524, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://525": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 525, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://526": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 526, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://527": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 527, "_targets": {"json://527": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://528": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 528, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://531": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 531, "_targets": {"json://531": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://532": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 532, "_targets": {"json://532": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://533": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 533, "_targets": {"json://533": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://534": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 534, "_targets": {"json://534": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://535": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 535, "_targets": {"json://535": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://536": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 536, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://537": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 537, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://538": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 538, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://539": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 539, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://540": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 540, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://541": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 541, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://542": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 542, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://543": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 543, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://544": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 544, "_targets": {"json://544": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://545": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 545, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://546": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 546, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://547": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 547, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://548": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 548, "_targets": {"json://548": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://551": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 551, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://562": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 562, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://566": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 566, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://567": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 567, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://570": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 570, "_targets": {"json://570": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://571": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 571, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://572": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 572, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://573": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 573, "_targets": {"json://573": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://601": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 601, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://602": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 602, "_targets": {"json://602": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://603": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 603, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://604": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 604, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://605": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 605, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://606": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 606, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://607": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 607, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://608": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 608, "_targets": {"json://608": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://609": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 609, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://610": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 610, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5001": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5001, "_targets": {"json://9009": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5002": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5002, "_targets": {"json://5002": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5003": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5003, "_targets": {"json://5003": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5004": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5004, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5005": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5005, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7105265186923027}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.2894734813076974}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5006": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5006, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.6336305213085214}, "json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.3663694786914786}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5007": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5007, "_targets": {"json://5007": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5008": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5008, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5009": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5009, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.12574033987473257}, "json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8742596601252675}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5010": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5010, "_targets": {"json://5010": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5011": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5011, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5012": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5012, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5013": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5013, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5014": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5014, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5015": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5015, "_targets": {"json://5015": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5016": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5016, "_targets": {"json://5019": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.23915238262142025}, "json://5133": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7608476173785798}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5017": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5017, "_targets": {"json://5068": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5018": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5018, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5019": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5019, "_targets": {"json://5133": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7224258444377175}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5020": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5020, "_targets": {"json://5020": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5021": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5021, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5022": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5022, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5023": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5023, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.16270700178727196}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8372929982127281}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5024": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5024, "_targets": {"json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5025": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5025, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.5924220607039576}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.40757793929604236}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5026": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5026, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5027": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5027, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5028": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5028, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8675205867701657}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.13247941322983423}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5029": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5029, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.5147106005829688}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.48528939941703114}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5030": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5030, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.38833292989011636}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.6116670701098836}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5031": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5031, "_targets": {"json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9863284020535221}, "json://5133": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.013671597946477902}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5032": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5032, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5033": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5033, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5034": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5034, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5035": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5035, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5036": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5036, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5037": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5037, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5038": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5038, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5039": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5039, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5040": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5040, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5041": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5041, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5042": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5042, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5043": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5043, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5045": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5045, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5046": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5046, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5047": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5047, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5048": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5048, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5049": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5049, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5050": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5050, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5051": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5051, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5052": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5052, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5053": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5053, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5054": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5054, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5055": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5055, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5056": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5056, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5065": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5065, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5067": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5067, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.06201399661995637}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9379860033800437}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5068": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5068, "_targets": {"json://5068": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5069": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5069, "_targets": {"json://5069": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5070": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5070, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5100": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5100, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5101": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5101, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5102": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5102, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5103": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5103, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5104": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5104, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5105": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5105, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5106": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5106, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5107": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5107, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.29235456942551624}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7076454305744838}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5108": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5108, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5109": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5109, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5110": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5110, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7387638702178395}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.26123612978216043}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5111": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5111, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.2515912022033352}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7484087977966648}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5112": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5112, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5115": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5115, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.22736056963670478}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7726394303632952}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5116": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5116, "_targets": {"json://5116": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5117": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5117, "_targets": {"json://5139": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.28054378071849867}, "json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7194562192815013}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5118": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5118, "_targets": {"json://5118": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5119": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5119, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5120": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5120, "_targets": {"json://5121": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5121": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5121, "_targets": {"json://5121": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5122": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5122, "_targets": {"json://5122": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5124": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5124, "_targets": {"json://5122": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.4437572194572055}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5125": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5125, "_targets": {"json://5124": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.13644820554642537}, "json://5003": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8635517944535747}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5126": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5126, "_targets": {"json://5132": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5127": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5127, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5128": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5128, "_targets": {"json://5132": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.028333630736165107}, "json://5003": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9716663692638349}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5129": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5129, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.11436485547237808}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8856351445276219}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5130": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5130, "_targets": {"json://5132": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.29984251486319297}, "json://5003": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7001574851368071}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5131": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5131, "_targets": {"json://5131": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5132": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5132, "_targets": {"json://5132": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5133": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5133, "_targets": {"json://5133": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5134": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5134, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.32382409830106296}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.676175901698937}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5135": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5135, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.08645655874211541}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9135434412578846}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5136": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5136, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.239089678008408}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5137": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5137, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5138": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5138, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5139": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5139, "_targets": {"json://5068": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5140": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5140, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5141": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5141, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.2216693993246311}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.778330600675369}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5142": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5142, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.026609684324048147}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9733903156759518}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5143": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5143, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.0716213365076186}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9283786634923814}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9001": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9001, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9002": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9002, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9003": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9003, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9004": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9004, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9005": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9005, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9006": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9006, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9007": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9007, "_targets": {"json://9009": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9008": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9008, "_targets": {"json://9009": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9009": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9009, "_targets": {"json://9009": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}}}, "_zones": {"py/object": "pandas.core.frame.DataFrame", "comp": true, "values": "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", "txt": false, "meta": {"dtypes": {"index": "int64", "mnd_zone": "int64", "x_coord": "int64", "y_coord": "int64", "area_ref": "object", "sector": "int64", "msoa": "object", "district": "object", "Urban city and town": "int64", "Rural village": "int64", "Rural hamlets and isolated dwellings": "int64", "Rural town and fringe": "int64", "Rural village in a sparse setting": "int64", "Rural hamlets and isolated dwellings in a sparse setting": "int64", "Rural town and fringe in a sparse setting": "int64", "urbanrural": "object", "cordon_inner": "object", "cordon_outer": "object", "Internal": "bool"}, "index": "{\"py/object\": \"pandas.core.indexes.numeric.Int64Index\", \"comp\": true, \"values\": \"eJwtk8FtRSEQA1tJATnYsMCnlij9txE8m4ulp7VXMPj9LPn7a2lEKrIiO3KfOFNn6hmJxbE4Fp9IfEORmEd8I74R34hvxDc+T2YsM/tmfDO+Gd+Mb8Y38WVpZWklUUlUEpVEJVFJVBKVxIpvx7cz2BmcLDgZnAzOW7Bz3537bvFZkRXZkRP5RN4JtrNAjagZJfQUVM2qYSX49IPm8OosAAVBgVAwFBAFRYFRJgtNgVOjn4YsWAVXAVaQFWgFWw2ykyygBWmBWrAWsAVtgVvwFsAFcYFc1Z0gC3BBXCAXzFWkFikeQIvUIrW6UGQX2d3tYsNmw2YDD2W1UjloG9qGtqFtaBvahrb/e0q269p97Zp2T7uoEDaEDWGPrjd+2Bq2hq1ha9gatoatYevZfwUnhK1ha9gatoatYWvYGraGrcP20q5Luy7turTr0q5Luy7turTr6f39AzjkrWM=\", \"txt\": false, \"meta\": {\"dtype\": \"int64\", \"name\": \"reference\"}}", "column_level_names": [null], "header": [0]}}, "_source_file": {"py/reduce": [{"py/type": "pathlib.WindowsPath"}, {"py/tuple": ["C:\\", "Users", "UKTMB001", "Documents", "Python Scripts", "MND", "ZoningTemplate_Model_v2.xlsx"]}]}, "_source_sheet": "zones"}, "_time_period": "AM_peak_hr", "_value_type": "Person Trips", "_levels": {"json://1": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "eJzt3DErhAEcx/HTGZQi04WSdGUyGcVJklHdZBAZzmBUN4gMprurUzqLUpRkYbizKIOUksWgTsnVlRuUchti8SZ0T8/d5/MKfsN3+E//SAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABodfe5j/7c9UUi6B20luHi3nZqLKs7AAAAAAAAAAAAAAAAAAAAAAACUTxLLzyUrvzBoaGOnsrdXfFd3QEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMA/WklGq59304mgd9Balkaes50zfboj1OanKrmxm2Md01BfhXw8M76uOwAAAAAAAAAAAAAAAAAAAAAAAjG689hTi9X9wSFU9nvzt5vRA90CAAAAAAAAAAAAAAAAAAAAAAAAAAA0qfNSR3ru93Qi6B20lupg22ussKU7Qq2QeRlIDtX88aah2iur5dTape4Ite/3xcm30ok7gIaqzy7/HBY3mr67PyxaPe4=", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 1, "_purpose": "IB_HBW", "_time_period": "AM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: AM_peak_hr\npurpose: IB_HBW\nlevel: 1\nzone_count: 168\nmatrix_sum: 2.0\ninterzonal_sum: 2.0\nintrazonal_sum: 0.0\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: AM_peak_hr\n    purpose: IB_HBW\n    level: 1\n    zone_count: 168\n    matrix_sum: 2.0\n    interzonal_sum: 2.0\n    intrazonal_sum: 0.0\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: AM_peak_hr\n        purpose: IB_HBW\n        level: 1\n        zone_count: 168\n        matrix_sum: 2.0\n        interzonal_sum: 2.0\n        intrazonal_sum: 0.0\n        Comments:\n        Created by disaggregate_matrix operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: AM_peak_hr\n            purpose: IB_HBW\n            level: 1\n            zone_count: 120\n            matrix_sum: 2.0\n            interzonal_sum: 2.0\n            intrazonal_sum: 0.0\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: AM_peak_hr\n                purpose: IB_HBW\n                level: 1\n                zone_count: 120\n                matrix_sum: 2.0\n                interzonal_sum: 2.0\n                intrazonal_sum: 0.0\n                Comments:\n                Created by operation <built-in function mul> (reverse: False) on\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: AM_peak_hr\n                    purpose: IB_HBW\n                    level: 1\n                    zone_count: 120\n                    matrix_sum: 2.0\n                    interzonal_sum: 2.0\n                    intrazonal_sum: 0.0\n                    Comments:\n                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_IB_HBW_Rail.csv\n                    MND Raw Data\n                    \n                ]\n                <built-in function mul>\n                [\n                    1.0\n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n"}, "json://2": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "eJzt3Xk8VF//AHChUqkUslSiLJVISAn3TEgkJRVZsyVEdoqSEFJkzVKhJGuRIkuLRLJUllRKUSGESDvq93u9vjXzfM1zH5PUaPq8/5nXOGfuPef6zJ1zzz33HDo6QEvWLHJ4nJJnjJoFWx+5rLZH3//O4peyku8OJxqcf/3kFab5DFrohOrs9D1SwmhzF1ocLLSSLB8erY0Tt/q9tCDm921M6CxdE4/QPhcOn0s+uNt5fmchv2OcOjFdLYXFVomOBTe/gsbTl27WhsT0be5tVd4KghSX80+DckR2N2QcQnJ3x7ruyQ6gej0bXDN2Kxa+wS4IF89bclmD6uXBw2ZSsmfZkwMjXj75rK51Lw5pYvW2JxQbhEMQ9zItKZ29m7CR3g+grlAfv4xE7Z3oSaj8/M8xe4lx1CdTVDGHi58srmQkYzWzE4zRzvcCegeYpZB/O0eIbYUqxfHHd5n5Eu+AIzH/BVcOXQmFdMQT6D3vw/YQ3O1YGd4t3tujQ0znC9Zo7+jkws2f0b3PpDnGkphuU5CBfZogPmq/xz9rhtLy8nM2R9GcE2G3prNGUr2eFzyDD3zc9gXTjF8zl1fPgOrlwVN+pDuG/VLwiJfvlFQ133FFY6yM001A3v4Eer5stttAlCGcP2nMOtZTNS0J5ui4CPNr1Sm7iHF0r+5Iu7MGL1lcyY8X3ZuiYoDms7WPmdC6BCVU7za2CFWiOP7UkloOn5xkR8y/8WJMUrBJMhKWvXljazN+u0nNLVcr6tlmYrpkTHtlxRR23Pz8K6X8D8RsI6Z7xblaZq0VGbXf4591o8x/SvDyELRu1paTCwJCqV7PmItf1r1M/4g9v59v35q4herlwTPZQzKa9ebhES9f7xL9y29S9bF+1ZbCz20RyJ9pbwrDBx04f9KYJbdedqy02oQuHhShO91lQoyjvJ1CXMbMk8ji6lRYDpsfpwq6+cLM2zVtNtLW/6p48SLl7bpoz/paGaRHzH9MdaubxYRw9K7H6sDO4l2425nmb7Z6K588Md3pTZ5ulv0Y3Pyd7yKnlbdtIKaXf7RJe61E3h9BK8qTMqK7lrijSqZV6iISHlSvJ/dT6b2HHJswLqddHq+sFaleHjyOXz2+GD1wGfHyVYiaHqoLV8Y+b+o/fLjSC3l9ftiQqaUE508a83ZM864rN8zRg/yjzDuESeevLv73ytJm5O1PXQafzk07DdDrNFGd7IElaLWs8r0r5yhvf4o4M7Ip8pLanx0E6zY1z2SU7VxWFjQhEHc70YwPfWf0k9qf0wkxlWvm47c/Pwi6+pzPIbU/J/cInRSxpd32p2erRFPsuhBUwp50695p6rc/py7unFp2+yMW5XPzwPXi0dv+PLdMpra1deTbnynjo7Cnd/WxWc7ObZ3jIhH3kf0aSRy6cP6kMXxzapNTneTQnM5DlrsK1hLjSOiM+wVBz16y/zcfq83SeC5xxPkgt7nJbCyyLPfXi+3jpjj+ZjGcbXHeSmqP7FTv7NPb4o6czbLvX3hihLsdramC8lxCC4np2izRkoLCbbjxmDp/gnrnfWli/vxTdwZcPPHbq3+6cp4ce4GSbehj4FIWGYPtVK+nsIlDX+z+29iV/orD03aN3t8txRZbBgZx/LgbLpE4FUvj/CVY19FaDZZwK1TRKWOnPFsMzp805pw2b29m0hb0ZmFV3bhp5sQ4arC1mLdhE/n97SalbBdutXXIzVNMflo7Hzq8SEDtU7gU5dfvDsGlQZNJ8eo5LXOdg1kUSjq5U6+odS/udhZtkWVjb1pFTDdyehEnNm0s/v2jmPrkT3Gk9ipLY3Q6k/rsUfs9/lkBCSH2p1Z4ovPHxp81OuJF9XpysbAHX8xsxXQfeFdcTFGmennwKPJdidAq3TPi5Ru4HVKpnq6Gvb7rFXi+wxcJOclxs35eA+dPGtPOG7TskrcrClQoKEqXJd2HnD7RlI/bdBlZXMV/NvK8f8EJfbY527EhWQXV+eR/EBcxpDj+PrziPHFd05N0/oyw5JJeUogKbHIcP+1IwN3OjUq9olBdG2L6glu7XrmJiOLm10wMZnfocyemHz/IKh/+ZfT2w/2sXSYvPfNmpaDu67xMtYxpVK/nzoM9X3YfmYiOa6hWNvhYUr08eOaGT6KfHXN6xMu3XXdpu3aHDdabfinYLy8ZtSYmPK+lt4bzJ60SNf48GyONK5qvU98vs2smWVwl3v/6InKPNprCz6RcMVcUFah47l7zVX7Y8ZcluvLDGv0E1Oyb1ycx/yDuduaqaY1NsSCNI/Sn70lcnTMNN3/A1lLx5UuMien9rdLXLyfOH7Xf4591ZyZy35QSiOzUkn2LHYJotp4jjZ9pgpK9lB8cLzAspztm13n3HkK21XJXIlcfI8bR8nv3VG09yc+L+gV7tY0X7UetXJYheus2IU2fPN/XURYUx1+pGlvQjk2k+xvPlGRzo8sq0OmDdyO9ezNwt2PXaCmoWkm6v3XQwDkae0bePv7OxMWAbYU36XsxWZg+7u1xdZr9ntz1PuOSnnwRbQ914OwUzqZ6PSP5E3bVf5mJLmRsVSt/50b18uBhfv1VPkYdP+6Gq8yBnf5dtQdW0lx83IInH81ew07HE+YO7U8ao3THPCG33gUl0TcKvFXxJcbRG03Jpj3Ri8niKqDqsq6ThjWacbRc+fnmlWin4KJJgo83Uxx/KPvV9f0epPE1RrPO7dgSloOccl2k9HuO424nLEpVbcxi0v30Rx6d6zqNycf3f3dst2kfSxepPb1r5v22IH3ZUfs9/lniYXQT6+JPItXWNefCO09RvZ6cD6TczVvGo/ll2k0pT6l/PwtP31K599KPj414+ZhL1JqKcq2wz+tbTMsFE5HigXMHOrkt4fxJY/aLiKafczZECp8zmXdMsyXGkWPjM+GB2+Tjg3jqDu2ZKLMJrY3MfFn6Sgixhaw+mj4fozj+XqWbcOsUmxHzn2T9cN3gXRxSU2OfM/kj/n2PWd6ZUQIyasT03jl5qf58zLj5GXg6Gw8+I40zrc7gFWYLmTdqv8c/q2LjnBIDLT/UUFHwzIDHn+r1bJ0S3qu3txsTdUy4PnbX6G33F1U5VgkuH/n7bYtTvY6dr9qIzd0zY4rGmyNoF9p3sY5eA86fNCb0qKD3bTl1pJBdvOvuha3EOJrzvG9ekif5/e0AXtOjAu8UUM00kfECURxIK9b09N4CysenME6VdznnrEnMf0LLuqUkLwhdlMtKnnrBAXc7pzkxjfn3Se3HGqUna3UK+nDjsWLlwsWFe0njsVTWt9C7rGMdtd/jn2UU4r9ciWEXutbcoDu3aDfV6+nhdOeCqWIjtoxd+90cRKB6efDkMnRvKXhnP+LlKzu2MnV5gALm95hlUq/XPvQ2RupebNFKOH/SqBvP4/a4qpDiaPMmsdjHleTP65SYMm5RGKeFMpwDal2lhRE7u7mQ4wLK5w8ZLKJgNVvb2ni0gOd88tg8/PlDTKS1CMqnSO2Y6LyQLiZ6/PlDWEonWqyxIY0LWLxm7qkPq2h3/pDlhYrsry4cQr1RX+iv51J//pA/RdzjUubYhpGfPwT8XcI0uD2fF3oT40hmVsyM7YsWkcWV5K5r7oXzLJGbioyYYyuG7HKUnr9w2zjs+ENo8vgdbVkobfe7qZK3o3C3c/eJ+ZSdz0n3089Ef5b3WDQX//z5WGycfxLp9+ClxQaCvYo0zX5POt31Nzk5xKL6QMFrZxviaLaeI00wUP0SoZb6862AP5uA4oYZl2tJz7F9iRijEhYkQRZX+Z+qF4wTskc3rVgGcpxXITbm1bPDpuoOO/6EUhU23tl5FfEZWrm0t5/E3c6tmlm1titI4wi1Z8rY3ZBbgJvfS7g+YkI76TrWe/9b/h1Hht9OHu06/W/kEh4kIItxNyy8bBJptp4jbX60TXIehh93APwv5rWi9mufWCK5lrLjU5e7ku7PjD35TryMjyyuDgfmX7Xbb4h09xorynlLoK0vQgRnHqP8+ZL526V5GMP+o12o/958bFoqytKIGle2Bn/coqTg1adqdVrEdDlb7Mbh3hm4+W23LuldEkS678utLq6z+DX5eAJaYXN6pwBDfSiSa2xaLrs+nOr17PDOEpZo/YwpMtcQ9jToUL08eJpk4tTt9Y6MePleu+/wdxc2xMaclbByZYlG2zgcsq6a6EP/JwAAAAAAAAAAAMDv5mbBznVADxlWGxw+W7uD2A8U37ot+sHz6WT9QnXGh3nvHdiA1pewrJuTw49yIz77KM1ZQXH/keyltQc4c0nzNNfRWy05YngCOelYi99R3Y+7nc31i7t8N6gQ05VLxmjF6DPh5j+fL3CunUGbmD7hvYmRWy/5fKa0ojeG7aEa+wEUcoMwb3ss/jiw3+VzYndJalAHxnBPyWSH71qqlwcPffVe64iEkZ9vOt5SeWz4wg2YmsKrV4mph1CiQY2WkcR66P8EAAAA/sOkeY7qS3lI8x+9YWs+8m7iErLf5ZdjBV4wxtmgs3ufvrPJlEexrcGckSFaw/79NiozOHLYMw/d+qTtu3ZZLO521k9+sqjrIem5z69i89qr+wVw8z9Y77SoKcSZmG5KiDrcFEH5c6Z/GpFzbco+4+KR1ryn+fMtR34+NloVOyDSoz4pBo4X+CkbOeauj68mrZ+hYsDN0NgmSRZXT+ZseWS63QFxW9RE+PUooS02S78Kd+oNO/7cTslGvlUoQJ+1I9X5heJxtzNhqwir1gQrYrr1hPxlWN9C3PxlYQvuml4gzfsjX8snrFk8/Hn2RrvoZWGfL21JRJ90u7/OmZxMs/UcaXXtYsfZbag/3wr4sxlnbeBgiyLND2cmb8hzMoO8vxBzOhVq9tEAXbqlT6+1XhwdKdXITGRfPez4a5gklDrxfTKym3KXUBeMv/7RyshdNbVbSc/N1wlNEFbxw1//SGG6+CQ0k9ReNQpxELr6bvSuI/Gz3mXyJ6WfDEGSzYqi7waov/7Rn6La8UQcqxU87wp+zsCW/VdbWknP6xTPXcu8N4x8/LzrnWiz4+sNkdv5gEJ1FQlkk+nOUqU+/PUZXtik+O7ekop0Mp+dj+LCHz+vuuriy7XBpH6Cx0KLXVaewx8/73XxSvZkFdL4+W1VflOLA2l3/LzrloXxk+NC0YWjZp3NU6g/fv5PobdBefKNAfzfbQAo0be/090vjXT+lBNyFvPdQX7+PJAfsOfYAkPUpM8xx2iWBHo5ozRuAefwz5+meoWPCzlTkekzU0ykFf85EJeeIxkmOqTzp7EKM8FiN/75U5cH3auYTjp/lqRpjsdW0e750zfx0suN9qHIPVtgV+2TMJqt50h7RsfyLCALzp8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPxN9qxULj++3po4jnhes+AqpRfk6/1qcNu8ueaggbpdv9y0qxJA7Jp8y9/tlxn2+GOT/YbTbV/HoBRjYbEzUp642xHTbZuilryGmM481iLFIWkCbn76yKBPwVqkdSOMTNT4TteRPw9AK6bdaDoQLOGDTmXcrA6u9qXZeo60p2UzI2N88edNBAAAAAAAAAAAAAC0IcrQsZQ58jixH+i4X2F+rpkCWb/Q52kRLEvoPNFB8TNOd5Q3I47XHXoZtZbD7j8qOGndcUHkDmLdteBteNF5/PlDjl5g2kxPWl9Z3sNQtGi8NG5+7nNd5VGZpPmg50aW6z+y2ECz/VwraxgzfZOykKfSJEYjuUs0W8+RZn3dbt99Lvy4AwAAAAAAAAAAAAAAAAD+Rv5JmZoJj+zQpJez0T0r0jhibT/xjJ0JQmT96kddi4scurchn1WXbg90SyNZ6UoxIx11ivvf+8pF29PPk9ZZ6uLnOMJkmomyrpXS3UnEX3diGmf5/vkXtpLWc594vKNoPw9ufp/ZVVp9G2yI6edWm69eLr2UZu8THNnclZO0LRpJ9OTsm7HxONXrGTVefHLTszHItvuOMVe9EdXLg8fybUxE5oORn68/z3WB0FL3bVgkG8eVAxonUYVsM52Snwms/w4AAAAAAAAYtmkx1mkpFQUoUlFk4bnUBnRE2WTLQzV7xCE47e28vQfIrmv834Voje++gZRj9Ys5QiNQ9Yo64/qcs8TPDbU/gaJ8LTXZEmK+geCc0L3ZLIRwdk99+nO9+OM/kxkW3LhzmZh+vqPdSDbXDTd/+k3H8w7OFcT0pJQBTy8V0rq+u4OY3Wa/H/66d6NNQMLCa7MHPqALLRI3fa58Grpe1gwaCwx2/rL6sx0cX+tWo456PRKvMt3J+G3HmdI4/O7leImoF91vRrx8Hy+9fyMhfRFjz7SYe3RtN7pmZmpkQN9NM/EGAAAA/Iwsjql04eWWKCxqxbRjtaTne3SSJiLOpXPJfi/Xa7w9FttkiOTHPE73/CSBeM1C5d6JqlD8u9p+8euJG76k9sFxF6cWVY00NOXoJtf0NPz136VLVO2OmW8hpu+4rVfqtJcDN7/ccmfpW7PNiekcX2SWHdQSo9nf/0rugU9aG8PQlUUHklbfpf7679IdQgcd73/GXl/w1r9xW4fq5cHzJKW/1o4ZP+6Ga0/+9dh7vIbYF9Z1k9d8jULu2zN69NT14f4RAAAAAAAAAAAAAAAAAAAAAH+B3jjbB1rxSsT7kPpn9jSa5nSR3S80Wn7nYLrHIsSvvXXtkzo6lLuRu6kUYx/2/Ust9fEuHk0uaCNmx7Burh7udk7ZxJ51jOAnpndYs55lq3qBez9zxvpdrzdtkSTmr8u/PT0+pI9m738m6dKrnhEwQqZsmz4KmxmP2vvdo42BKE94N6suHC8AAAAAAAAAAAAQ1ctfMy/p68WeyM+aWNNBj/ibTTsm2jIi1VOLGd/rcCLGmoAj7j0fsfCH05vq8h9j12WndtzjeIvdWnreePOUNmL/k9plpdZrn1uw83v0E3SYW7Ej2prOum0sSOO55qqNTm24/VSqPuOs1W5WYjXdjHxbXnhgBbzac1yOPccGqpfxPe1rwuYUr2Wa8DAZS9z6oadhTP2o6+869mHu2DrHGizPat8xi0dV2KfM/hMv1+VjD0xSuBwetWE+jm5BnIYPyMq9rnq+NPf9V5j6pZTpXnfpULXt6XXrl7EjZsOGh+42fZhyY6OTLDsDcr+SVbBiCfm67Xi0plXxV5e7oenLDnyZfqIQrdtjby6wLRd9mrfbd628Bdl2nENuPfWySURbTwd6dWW5odeEA/StLsFo957Z5Wc2Zw6530bnEq8Py72I+ZTtePzmJfQiJwJDahvfA5QhkrLw7kQl4uv3fHcuCIlrdMUR3xujV5ulVA1x91fde2bljjzSc9f7isJnl6Y6E98L6BbdLKQ7+Mf3eznE90b6shVgeaJpLoHi9WhWwJPw+JVPh6zX/OcHm2btOPfL6t8vaZfE9WASYhS/r89+ZwfF+9EN27H53DilIfMzpDlu3l5piHwi/S3vIsNv8WKG7lXaW1zeP3Qcfue+TvDscYX7xPzqq8p0vL0Kf/q8MSF63RiWfFssnU8gtPlDCgpS7xqfYb5z1J2PwM/ZzaJ+rSOgH63aN/aipOUjdO30VR+JXbKE9zFck6U79pPFocclOzaGkwXIuMekJCg5FMlGFdgvLEui/PlN/+Kl0tcYCN/fl3gXvehpnESY6hh6743F9/kVupFy2dHUjO0txO060+/zah+XQ3xPONE4YDfHBXe/HWz9RfJXSPOUiCTN0uebMfLP6Y0Wxne++nwZ8xYJBHOFD7i8o1o9Q5Rz02dWDSDZ97fGeUUdRhI3ZxWjoI4hykOaV+Of//v7Icv/OaVJXjqAn5BU2OiiPXMSgX9b+eaHEgzfXvsorn+VVP8k68jXI368/Pfd4m1e3IPt5G8Pk74oTDjZ/IGP0UqUMNL7AQAAAGhPZT5OwuUh0n+Q+rftiV3+3/m6f3R/g7Y3UuUdrQhDHD/w3w0VdwAMR6XM793fUN9/lsHnwx8sX+Nvrg8AgJYd8y3k1ulxQKEdib5H+IORDaH31IbAFFRhcfiRnsIysn6hrLIagnO4E7J7msy//YAKCmUtuRQ4w5D4uaH297JAcCIWTpr3+BDD1MhCjkKkwXf+1oBaAu7nGaJLOtMXk9Yz8v1i0ooxiOLmj405U8Ze6U5ML5+mkCn+TJH4Hgt/tcpxpifN9IdWnkwWF/2YjFp10vxPPEkdsl58uruCHcef+WX1X7nQrtzuEwMKUVpy9tMbk992nCmNw+9mnnfatXL/6REv3xO6oLdNY8yxs1+elKppx6PSXqtDclXb4P4RAAAAgOtH+4O+9yv+af1Ig/sDAG0YLXHYnffP62gpD/hVtFu350yKJY0jcWloEhUNPEp2XbPuGX2Vbuc9xCZcsevU1STEnbIl0kv8GsXXPxW2X3O6VJOJ1zGcj2YlPvTnI5wrre+fmsRIwPtcenz2s3LZO6Tr8d6sSneuANz96rKf3sTd+ISYLrVjj3QYNvLXaaNFU6FY5CuRCQQGv3rRo4yTCNQuz5+in2GsbOAz0ni6kWZhXV3FX5KAbSy5M2Xg68iPkwIAAAAAAAAAAAAAAIDRIuNJ7tprWrbobbHDAfW37ghNG7fqXrYHcl9ssmz8q1CkkPaxca6ZI+LkSwvfck4TSdaN3Zmx0xa91nx5OmevKbH/NKX8w8r+MmOkmKzIejXFBFmpHFwkmXwILTiZP/CmyhS3n9XyaSLjUxtVNHYO43aD2D7M58neJ3I2Bkjn1kIm0QVGaPle3va0uQLoTcGN/OMvNUddf22VQrZURfV6lMS+uNJVQg21s74OQZul0O59pYZn+Lcht5VOPE9nbyQr9xWP5YGVN8wQ9wwnrMvdDUUXtdSUaQcjX5nVxS02zmjTQ9NrFlL7kGTUnVkSpkcorvf2QPWK2ayHUBPd2p5wK1cUfcXvdBEnB2HOXRbr+518ZNupeaN0wvOUIToy9rGSZqoEYp67VdKsQpni/emN73gukxtCzN/4hafJ8UUqOstjsd16RxAq7bTcUjiukPj6PV/B9JqzbBNI6xdPe+Ch5suHv36xiK7nWrNr24npb/OuGIdx0N76xeF79jFyqa1A0++M+VLOEIbSVadc7dhN/fWL58300ePmmYnUpK36N7C7UVye6xEtk40ZCofMH1H6IMLE4zEq+mpu9yL00bd4eU4WN0Mpu3yoeNUx0vdlXHrNiunK2E8fvyb669IvVD0wXv8Kx/OKeajtVDJHbMxeGP8JAAAAAAAAAAAAQCW3XrM5b5voT+z36Tp/n3VZ6hKyfiDuSge7TFNblFPWvQ8ZKyDmPt0VBNstw+4vKjrdaV3jlo+s0OJ2C9E43O1sUVq4pyid1J/JGLbKL7RcEDf/lDf2zULbSfODNiK3rqBLiOr9gr/KPauxnla58YjFsG7CnIX48wiAf3s7J8i5RiAWjhcYQXMJv2rLg58/AoBcN82cz+D5IwAAAAAAAACgxN86743hX1pvAAAAAPz58Na74JX957Wbyuth0Pp6RgAAAAAAAAAAwH9i/HY9TvftVezbaxDO9fHbb9ftGYOu379/bii46xAPcd/jR9fbHNy/EDf48xSW949xedDrEHhprf7fUBqHRL/oflvjin9eWb6VpzHv1+wHjA6Ufp+I8fDtfPSz/aCGlMb7oHwFQ+yXZVD+v2X9YgKNnhd/FThegBoGtz9/tcHtz6C/5Hz4q/DCOKff6nt7FNCmTYO+TxNxvl+L/vm99uD7J71g5U9+D6O+fV75f7cDPFYN2s/zIc6fg6/j2Gj7fOHh+a1+DrRdzxHnCMcLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Ke6/GPZu/N/z35YBuVvHO5+/xCEHzw+4Pfg/fZ/acyjbjnASBNa9bzZL/ks4uGv6lPPzkJqe3kSKq69QAz8qa5XnfXR4PwR7w9LrtQ8hqr4zF9bL7BFlatZ5LcYehM/N9T+zu0vv7vJ6yIxX666Xb9mewvaoz6jMb+vDPfzuYh/2uNrocR0732EmZFjNuLm9/3wFal7xRPT2cMlRHrsLInv37crF8Z25Q1Z3j9FQ8Fy29n2lej+QOp834SqIev1emtt2kejxl9W/6+amEJIlhwSZzo+pjf1xG87zpTG4Xcti87KWX8sHfHylbyzZI1+dBIrnKU717ikHs0bM316onQcNtL7AdT1QfAigcUjEo3jXBsZs+QiKghoSX23vhJd0srRU9quSxZXmw7lp9VbRSG1iRFoCctOlE+w6jrS60n83FD7CysMKHbuiSPmm98Sosyt3owmL+ZqSOXEj+O2R/SPVQ1CiOnhY93GaJ3dgJv/Gn3ss36BU8R0k/uVb70izYnv+x07GW5hZ2jm/Bn38fKtbRF3UOdjxRUnLIb+PxCuVmlKs5T/svr3vzYwGuM/H23q1yif4un3244zpXH4XX6Q3Y59QrdGvHwr+N+0bHMPwC5rHkhTLC5BCSrvwmJu+8P5EwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAUUOMwuf/eAfn+8nnBg2H+fnKIZ7HJCsnjVP/y+oLAAAAAAAAAH8rTtl/v8+Q+e/5ur/9vXLQ63CJfdsvr+z/ztf9g/v50fy0YqjjCP4NjhcYCZT2fwIAAAAAAPArsPzh1zXqf3j5f5SH7L9fAQC/Hz+B2iUAYGjd6N+vf4rB9xUKZP57epDMf8//XZzMv19/FGHQ54a7HWoJGqHyfz++g/8PlPrZ+z+/y+DjpT5Euf+0eKBVPxyXVG4/e/yyuAlQrenP0tuMkq/yIBYZU1REH/Hoy8NtqO6YYgL3BFd0ViX21tgUHXS5XsQtOUEOaWt87Ml03Yyipn3prru1hvg7EVK7lzUySBkJse/sn56lgjZ+tu9gYrNHp3wyS95IqeL+nlTwKJYc6VqCVi/LNT02+TnmvkLGhqNJAemtFvdz2amEmqNaGlziJqE0+R4Z7265Ufe75BV6KnBXhSRy3ihlnMMugQ6MC5khsWQ2itWeGs4cr4qmrjKM6+pfTlbu2DWz7XKvqyHPj+dYzT8aodvCET7055zR8X2BrRM26SON7K/GCmamSFehbrqYtyPF9Xbr09LrOW+Hnio+i+VeZYTy5LqxIrEvKDS/bb2PzXiy7Sh8WhVtc3UVQgkDXXVZXGjG022Ia6kYxfvTMTLpM9m9i5jfp/mmwcwVIaiw7oqjjbMTmlv//1sNSiS+fs83Se3GixeWiPi+fMq6A8tlv+DO58227IZC2MT1xPzmAQX3a5nYR108/KyXrN1KPmJ86ErsrUbXBa5I54rqda/pe6hezxDkHzgndwxa7qHEaXzBiOLyKJtlf0g/lDhkft431ex6n64j1oe9rmUG17/FSwlZ3AwlMqbAVTSJ9H3ht1uWvbds3k8fvwmHe2yWqm3DcgRezWASPomOaj8MvaprAvPPAwAAAAAAAEbYr+uPr916YtbUNblwHQP+CoLjX7/yLc7CDGwbdWIGvlK9XwWMrKnyRh0fxucQ/6+R6TLnvM3qf9n/+faSbFuLmAKIIxrHGmWwIWeaMvrIZpPRMSHpr/t/lz0wt6/pTMMkx6Z8uqb+Es1YmrZVdk0KtBtoHEuEjYrPwpa/Lt7ByLDLX+o51+X6L4+f37UfAAAAAAAAAAAAAAAAAAAAAAAYnu5v6wl1f5sHNG6I9YW+K6Aw33dxg+YZ/V3rFGX8YDn/NCwwf+uwwHEDw5PHy1bU8rgEzTI0lObn+f7csCAhXe52MtPW9WTjQ+qbn9SqzgxAsh/FvVctNULMoX3CTJlOFI8jkciPkHi/r5KYP7M56A232UMUeE9Kuz3vMu52OidYKgmNP0BM35k7STJUVhE3f60C/ZzzN8OI6dLmszgl5+vR7HiXrkljopM9r6O0WqbOT6WFVK+nWPD61eHNWijk6qOeB08u/WB5KJ1X6eef86ifxb6l+kz+iB+vNwpjmEpyLmOiLeoCdIIfkPs4gzPqxTB+ntbwPhbhE5jyFLWMX+Jt6iqKzj5YzOqbqUjwcfRz7txXRTbed+1B+xI/WRaU0JW7ulD8BbYvqvymoeRHiscFKwVsj+261YRqHcP1Xyq0IiVxTxb35bpoAuNTueJxBGJ82e2oTooRqyG+n2y1/thlJ9J8JtnzjmTlhd7E3a/K6cC2KhEOYn5f7TUu9RYNNDt+WbJ8ZzbXQQW0oeDKW8X3+L8rv0tIy6y3sdvvouVBdtYRLHcoLo9tDA9XUhkjYah8z9Wl5vi0vEAeJ49VnI1hJOQstdi0PvITqo+WTBGqeEvx/szQ9sneddiIH6+FOzO75nNUY0+XPAynWzCZEOz1wFDeegphpPcDqOv780fYXv27s7rKv8UREyFl6pj6Hb32ZHFlxZZEJxV+Hj1/eNh7fZk3aumQ6JaUiqY4/gY/fxR+v4BL23UAzeCYNG9A5xnudgRKT+Vd355Mmo+pW2YsvYM5fnt1j+WWRq5cYrrOI4FSPfr9VD+v/Cr5QtKP7wo1I9mrj2YqXKD+8w/Uef6IhfCjn+CNoXOSvNg44uWD54/+ZkPNfyiGMz/jcOdNHO586UOtD0eAfq1RYfA8vb/ar5u/c3hGW3nAXwrWpQAAjBr500LXdx3nRK9SBObl+2WgKmHTgE1jL2GmbbGcLTaaZNc1zhWJmxSqwpDfxu29FifMUdXYAp2TTPuInxtqfxejdUysx/IRt3uBQ2OfqsMzdN3ji9+mw0W411EtDdN9JdgCiek9/vGHrN+sxc3PJtO748ulE8T0J76aJmbzTInv83xvzCo2PUIz11N7rrSnzGYuRQwnCvXVG8uGvB59nFfels954ZfVvyZrgtCrM0lY0MErEq9jmH5bfwKlcfhdTZ+oypObN0a8fAdXm84XPDkZ227/OV7p2WrEu65QWaJzIs3EGwAAAAAA+DNkXRRfnTu/ASthaIuV8+zEokW25ox5+hq7EWve09xPj6RKXMpW2r/AWAoTv4jGFmOBUlc/OW9qwKSs2I9e8ashtl93+FWnrmuvwtZy8xmcuFaNaYwtmLrf4DPmJdPzhqmuBredazptpulDoTys9IxBA+9mSyz/VkW7EcNt7GRe8X4GvUqsPcm3YEAgDJvCVb7vZm3xqGsv57wQst6seRULeGX/Rv9+PhYtqSmG1iRgbHTzjjcI3cMcXO6d2iBdSFbuB2tU1565UIv1m7/ykZRqx8xq5/Lo+tMhc4WFlxNNmjGewsTjhOudmItlYmhLxwDl9Z4/ebL13U8YnVi9QJpYGybWE8N7itEH0bHcu7GHI5h8OwWbVypeuovRebA6ixacwugWrZndEU/59RJd4RMf47oxpOulyjuaE45yI7qPRe3Yuq+YVzLhMrZ4Cfr+SsynuDM7t+0/xitt6jnTz+yDv1/1S9J74u+T0g0FC43OxYy6ePhZfZISZxOnJ2N0ymxRnmwMiM5qwe6Fuxmpfv+djnBNoaXuIEYnO77Jp6qN4uN+LPnKnXGLlgxZ/iOnr9hGLluD+rQYi+ZpqnyLlw2ILmVQ3AwlaH2lGR9pHa0lc5eHT3ya9vNxIn7q4qzpr+XoPltFnp64ANG59qvul+2Q++ntAgAAADTj+3Obv+s5yu5Bz1Gqf9uv2FD7H5Q+1HOj8Fze6NBI48/N4mnMo3YJADUNNb7yd48nwht3CgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEYLlvUrNkgGRaDDct7Ls9XPoDGsUmGqXEnIQYozvOHSZdR5qdF+q8UJdDygUL5O2wOVcs5cp3w+Ar3bFnjX8FAA8bn+CAkv42DOQ8iSefLWxbqH0b1QvoqX3RcQ4Yr57SrGQNzn/+c+LREJKXFArobm2ZVt89DhnlRCSfcBNMVfikn4qh+aqKetLrV7Haqe0tDM5+VB/XkUBkm75TaTu8cZiTw958U/2Qmden6UKYbLEDnZX+aauicQ2bjdypgW5EZW7kl7rXU3WgQh1w09C3dWx6ONiluF5RlzkXSlQ/e9RXGot/T6Cz2PM+ilrWCXwclsiuvN1Den4KL3BZQ9/hNzInM8ujSNUzr4jDxBcUDZK7tOhWw7pUbml7/2+SLC8t1VE/X0UHbr+XMxjXYU78//TIP0py95xPyvj1t7tXDfQyuY7LTD0i6hRY7N4gkDbcTX7/ky4jx4KjeS1t94ELfF83kaAXe/7D09kzN5gonpYbbCGekSWqMuHn5WWlbbo953xsi5KO5e+OPLaFWWkg/9h6tUryeh2U0n7rACcmUMcVX1iae4PCZ3FZhLPrYNmX/Hw6ANbjUMhPubS1z75zMQ/omXCYTBcTOUm0dLb00vJX1fIrYVyPrf2/bTx+9mkU0d975EbMZ7tZtNr5+jjddTKo10ErD/AwUqXMk=", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 2, "_purpose": "OB_HBW", "_time_period": "AM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: AM_peak_hr\npurpose: OB_HBW\nlevel: 2\nzone_count: 168\nmatrix_sum: 334.0\ninterzonal_sum: 328.75900258420245\nintrazonal_sum: 5.240997415797548\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: AM_peak_hr\n    purpose: OB_HBW\n    level: 2\n    zone_count: 168\n    matrix_sum: 334.0\n    interzonal_sum: 328.75900258420245\n    intrazonal_sum: 5.240997415797548\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: AM_peak_hr\n        purpose: OB_HBW\n        level: 2\n        zone_count: 168\n        matrix_sum: 334.0\n        interzonal_sum: 328.75900258420245\n        intrazonal_sum: 5.240997415797548\n        Comments:\n        Created by disaggregate_matrix operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: AM_peak_hr\n            purpose: OB_HBW\n            level: 2\n            zone_count: 120\n            matrix_sum: 334.0\n            interzonal_sum: 330.0\n            intrazonal_sum: 4.0\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: AM_peak_hr\n                purpose: OB_HBW\n                level: 2\n                zone_count: 120\n                matrix_sum: 334.0\n                interzonal_sum: 330.0\n                intrazonal_sum: 4.0\n                Comments:\n                Created by operation <built-in function mul> (reverse: False) on\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: AM_peak_hr\n                    purpose: OB_HBW\n                    level: 2\n                    zone_count: 120\n                    matrix_sum: 334.0\n                    interzonal_sum: 330.0\n                    intrazonal_sum: 4.0\n                    Comments:\n                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_OB_HBW_Rail.csv\n                    MND Raw Data\n                    \n                ]\n                <built-in function mul>\n                [\n                    1.0\n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n"}, "json://3": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "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", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 3, "_purpose": "IB_HBEmp", "_time_period": "AM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: AM_peak_hr\npurpose: IB_HBEmp\nlevel: 3\nzone_count: 168\nmatrix_sum: 14.437877251290814\ninterzonal_sum: 14.381497926272356\nintrazonal_sum: 0.056379325018458985\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: AM_peak_hr\n    purpose: IB_HBEmp\n    level: 3\n    zone_count: 168\n    matrix_sum: 14.437877251290814\n    interzonal_sum: 14.381497926272356\n    intrazonal_sum: 0.056379325018458985\n    Comments:\n    Created by furness_matrix operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: AM_peak_hr\n        purpose: IB_HBO\n        level: 3\n        zone_count: 168\n        matrix_sum: 39.0\n        interzonal_sum: 38.7742939551676\n        intrazonal_sum: 0.2257060448323995\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: AM_peak_hr\n            purpose: IB_HBO\n            level: 3\n            zone_count: 168\n            matrix_sum: 39.0\n            interzonal_sum: 38.7742939551676\n            intrazonal_sum: 0.2257060448323995\n            Comments:\n            Created by disaggregate_matrix operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: AM_peak_hr\n                purpose: IB_HBO\n                level: 3\n                zone_count: 120\n                matrix_sum: 39.0\n                interzonal_sum: 38.0\n                intrazonal_sum: 1.0\n                Comments:\n                Created by copy operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: AM_peak_hr\n                    purpose: IB_HBO\n                    level: 3\n                    zone_count: 120\n                    matrix_sum: 39.0\n                    interzonal_sum: 38.0\n                    intrazonal_sum: 1.0\n                    Comments:\n                    Created by operation <built-in function mul> (reverse: False) on\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: AM_peak_hr\n                        purpose: IB_HBO\n                        level: 3\n                        zone_count: 120\n                        matrix_sum: 39.0\n                        interzonal_sum: 38.0\n                        intrazonal_sum: 1.0\n                        Comments:\n                        Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_IB_HBO_Rail.csv\n                        MND Raw Data\n                        \n                    ]\n                    <built-in function mul>\n                    [\n                        1.0\n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    Convergence Information:\n    1: count: 168, col_pass: 123, row_pass: 118\n    2: count: 168, col_pass: 123, row_pass: 118\n    3: count: 168, col_pass: 123, row_pass: 118\n    4: count: 168, col_pass: 123, row_pass: 118\n    5: count: 168, col_pass: 123, row_pass: 118\n    6: count: 168, col_pass: 123, row_pass: 118\n    7: count: 168, col_pass: 123, row_pass: 118\n    8: count: 168, col_pass: 123, row_pass: 118\n    9: count: 168, col_pass: 123, row_pass: 118\n    10: count: 168, col_pass: 123, row_pass: 118\n    11: count: 168, col_pass: 123, row_pass: 118\n    12: count: 168, col_pass: 123, row_pass: 118\n    13: count: 168, col_pass: 123, row_pass: 118\n    14: count: 168, col_pass: 123, row_pass: 118\n    15: count: 168, col_pass: 123, row_pass: 118\n    16: count: 168, col_pass: 123, row_pass: 118\n    17: count: 168, col_pass: 123, row_pass: 118\n    18: count: 168, col_pass: 123, row_pass: 118\n    19: count: 168, col_pass: 123, row_pass: 118\n    20: count: 168, col_pass: 123, row_pass: 118\n    21: count: 168, col_pass: 123, row_pass: 118\n    22: count: 168, col_pass: 123, row_pass: 119\n    23: count: 168, col_pass: 123, row_pass: 118\n    24: count: 168, col_pass: 123, row_pass: 118\n    25: count: 168, col_pass: 123, row_pass: 118\n    26: count: 168, col_pass: 123, row_pass: 118\n    27: count: 168, col_pass: 123, row_pass: 118\n    28: count: 168, col_pass: 123, row_pass: 118\n    29: count: 168, col_pass: 123, row_pass: 118\n    30: count: 168, col_pass: 123, row_pass: 118\n    31: count: 168, col_pass: 123, row_pass: 118\n    32: count: 168, col_pass: 123, row_pass: 118\n    33: count: 168, col_pass: 123, row_pass: 118\n    34: count: 168, col_pass: 123, row_pass: 118\n    35: count: 168, col_pass: 123, row_pass: 118\n    36: count: 168, col_pass: 123, row_pass: 118\n    37: count: 168, col_pass: 123, row_pass: 119\n    38: count: 168, col_pass: 123, row_pass: 118\n    39: count: 168, col_pass: 123, row_pass: 118\n    40: count: 168, col_pass: 123, row_pass: 118\n    41: count: 168, col_pass: 123, row_pass: 118\n    42: count: 168, col_pass: 123, row_pass: 118\n    43: count: 168, col_pass: 123, row_pass: 118\n    44: count: 168, col_pass: 123, row_pass: 118\n    45: count: 168, col_pass: 123, row_pass: 118\n    46: count: 168, col_pass: 123, row_pass: 118\n    47: count: 168, col_pass: 123, row_pass: 118\n    48: count: 168, col_pass: 123, row_pass: 118\n    49: count: 168, col_pass: 123, row_pass: 118\n    50: count: 168, col_pass: 123, row_pass: 118\n    51: count: 168, col_pass: 123, row_pass: 118\n    52: count: 168, col_pass: 123, row_pass: 118\n    53: count: 168, col_pass: 123, row_pass: 118\n    54: count: 168, col_pass: 123, row_pass: 118\n    55: count: 168, col_pass: 123, row_pass: 118\n    56: count: 168, col_pass: 123, row_pass: 118\n    57: count: 168, col_pass: 123, row_pass: 118\n    58: count: 168, col_pass: 123, row_pass: 118\n    59: count: 168, col_pass: 123, row_pass: 118\n    60: count: 168, col_pass: 123, row_pass: 118\n    61: count: 168, col_pass: 123, row_pass: 118\n    62: count: 168, col_pass: 123, row_pass: 118\n    63: count: 168, col_pass: 123, row_pass: 118\n    64: count: 168, col_pass: 123, row_pass: 118\n    65: count: 168, col_pass: 123, row_pass: 118\n    66: count: 168, col_pass: 123, row_pass: 118\n    67: count: 168, col_pass: 123, row_pass: 118\n    68: count: 168, col_pass: 123, row_pass: 118\n    69: count: 168, col_pass: 123, row_pass: 118\n    70: count: 168, col_pass: 123, row_pass: 118\n    71: count: 168, col_pass: 123, row_pass: 118\n    72: count: 168, col_pass: 123, row_pass: 118\n    73: count: 168, col_pass: 123, row_pass: 118\n    74: count: 168, col_pass: 123, row_pass: 118\n    75: count: 168, col_pass: 123, row_pass: 118\n    76: count: 168, col_pass: 123, row_pass: 118\n    77: count: 168, col_pass: 123, row_pass: 118\n    78: count: 168, col_pass: 123, row_pass: 118\n    79: count: 168, col_pass: 123, row_pass: 118\n    80: count: 168, col_pass: 123, row_pass: 118\n    81: count: 168, col_pass: 123, row_pass: 118\n    82: count: 168, col_pass: 123, row_pass: 118\n    83: count: 168, col_pass: 123, row_pass: 118\n    84: count: 168, col_pass: 123, row_pass: 118\n    85: count: 168, col_pass: 123, row_pass: 118\n    86: count: 168, col_pass: 123, row_pass: 118\n    87: count: 168, col_pass: 123, row_pass: 118\n    88: count: 168, col_pass: 123, row_pass: 118\n    89: count: 168, col_pass: 123, row_pass: 118\n    90: count: 168, col_pass: 123, row_pass: 118\n    91: count: 168, col_pass: 123, row_pass: 118\n    92: count: 168, col_pass: 123, row_pass: 118\n    93: count: 168, col_pass: 123, row_pass: 118\n    94: count: 168, col_pass: 123, row_pass: 118\n    95: count: 168, col_pass: 123, row_pass: 118\n    96: count: 168, col_pass: 123, row_pass: 118\n    97: count: 168, col_pass: 123, row_pass: 118\n    98: count: 168, col_pass: 123, row_pass: 118\n    99: count: 168, col_pass: 123, row_pass: 118\n    100: count: 168, col_pass: 123, row_pass: 118\n    \n]\n\n]\n"}, "json://4": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 4, "_purpose": "OB_HBEmp", "_time_period": "AM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: AM_peak_hr\npurpose: OB_HBEmp\nlevel: 4\nzone_count: 168\nmatrix_sum: 131.55165633571514\ninterzonal_sum: 130.202037007712\nintrazonal_sum: 1.3496193280031366\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: AM_peak_hr\n    purpose: OB_HBEmp\n    level: 4\n    zone_count: 168\n    matrix_sum: 131.55165633571514\n    interzonal_sum: 130.202037007712\n    intrazonal_sum: 1.3496193280031366\n    Comments:\n    Created by furness_matrix operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: AM_peak_hr\n        purpose: OB_HBO\n        level: 4\n        zone_count: 168\n        matrix_sum: 364.0\n        interzonal_sum: 360.77429216006425\n        intrazonal_sum: 3.225707839935766\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: AM_peak_hr\n            purpose: OB_HBO\n            level: 4\n            zone_count: 168\n            matrix_sum: 364.0\n            interzonal_sum: 360.77429216006425\n            intrazonal_sum: 3.225707839935766\n            Comments:\n            Created by disaggregate_matrix operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: AM_peak_hr\n                purpose: OB_HBO\n                level: 4\n                zone_count: 120\n                matrix_sum: 364.0\n                interzonal_sum: 363.0\n                intrazonal_sum: 1.0\n                Comments:\n                Created by copy operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: AM_peak_hr\n                    purpose: OB_HBO\n                    level: 4\n                    zone_count: 120\n                    matrix_sum: 364.0\n                    interzonal_sum: 363.0\n                    intrazonal_sum: 1.0\n                    Comments:\n                    Created by operation <built-in function mul> (reverse: False) on\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: AM_peak_hr\n                        purpose: OB_HBO\n                        level: 4\n                        zone_count: 120\n                        matrix_sum: 364.0\n                        interzonal_sum: 363.0\n                        intrazonal_sum: 1.0\n                        Comments:\n                        Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_OB_HBO_Rail.csv\n                        MND Raw Data\n                        \n                    ]\n                    <built-in function mul>\n                    [\n                        1.0\n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    Convergence Information:\n    1: count: 168, col_pass: 94, row_pass: 8\n    2: count: 168, col_pass: 95, row_pass: 4\n    3: count: 168, col_pass: 98, row_pass: 4\n    4: count: 168, col_pass: 124, row_pass: 6\n    5: count: 168, col_pass: 127, row_pass: 8\n    6: count: 168, col_pass: 135, row_pass: 32\n    7: count: 168, col_pass: 152, row_pass: 163\n    8: count: 168, col_pass: 153, row_pass: 168\n    \n]\n\n]\n"}, "json://5": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "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", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 5, "_purpose": "IB_HBO", "_time_period": "AM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: AM_peak_hr\npurpose: IB_HBO\nlevel: 5\nzone_count: 168\nmatrix_sum: 24.35817100015836\ninterzonal_sum: 24.200602314985456\nintrazonal_sum: 0.15756868517290293\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: AM_peak_hr\n    purpose: IB_HBO\n    level: 5\n    zone_count: 168\n    matrix_sum: 24.35817100015836\n    interzonal_sum: 24.200602314985456\n    intrazonal_sum: 0.15756868517290293\n    Comments:\n    Created by furness_matrix operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: AM_peak_hr\n        purpose: IB_HBO\n        level: 3\n        zone_count: 168\n        matrix_sum: 39.0\n        interzonal_sum: 38.7742939551676\n        intrazonal_sum: 0.2257060448323995\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: AM_peak_hr\n            purpose: IB_HBO\n            level: 3\n            zone_count: 168\n            matrix_sum: 39.0\n            interzonal_sum: 38.7742939551676\n            intrazonal_sum: 0.2257060448323995\n            Comments:\n            Created by disaggregate_matrix operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: AM_peak_hr\n                purpose: IB_HBO\n                level: 3\n                zone_count: 120\n                matrix_sum: 39.0\n                interzonal_sum: 38.0\n                intrazonal_sum: 1.0\n                Comments:\n                Created by copy operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: AM_peak_hr\n                    purpose: IB_HBO\n                    level: 3\n                    zone_count: 120\n                    matrix_sum: 39.0\n                    interzonal_sum: 38.0\n                    intrazonal_sum: 1.0\n                    Comments:\n                    Created by operation <built-in function mul> (reverse: False) on\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: AM_peak_hr\n                        purpose: IB_HBO\n                        level: 3\n                        zone_count: 120\n                        matrix_sum: 39.0\n                        interzonal_sum: 38.0\n                        intrazonal_sum: 1.0\n                        Comments:\n                        Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_IB_HBO_Rail.csv\n                        MND Raw Data\n                        \n                    ]\n                    <built-in function mul>\n                    [\n                        1.0\n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    Convergence Information:\n    1: count: 168, col_pass: 122, row_pass: 118\n    2: count: 168, col_pass: 122, row_pass: 118\n    3: count: 168, col_pass: 122, row_pass: 118\n    4: count: 168, col_pass: 122, row_pass: 118\n    5: count: 168, col_pass: 122, row_pass: 118\n    6: count: 168, col_pass: 122, row_pass: 118\n    7: count: 168, col_pass: 122, row_pass: 118\n    8: count: 168, col_pass: 122, row_pass: 118\n    9: count: 168, col_pass: 122, row_pass: 118\n    10: count: 168, col_pass: 122, row_pass: 118\n    11: count: 168, col_pass: 122, row_pass: 118\n    12: count: 168, col_pass: 122, row_pass: 118\n    13: count: 168, col_pass: 122, row_pass: 118\n    14: count: 168, col_pass: 122, row_pass: 118\n    15: count: 168, col_pass: 122, row_pass: 118\n    16: count: 168, col_pass: 122, row_pass: 118\n    17: count: 168, col_pass: 122, row_pass: 118\n    18: count: 168, col_pass: 122, row_pass: 118\n    19: count: 168, col_pass: 122, row_pass: 118\n    20: count: 168, col_pass: 122, row_pass: 118\n    21: count: 168, col_pass: 122, row_pass: 118\n    22: count: 168, col_pass: 122, row_pass: 118\n    23: count: 168, col_pass: 122, row_pass: 118\n    24: count: 168, col_pass: 122, row_pass: 118\n    25: count: 168, col_pass: 122, row_pass: 118\n    26: count: 168, col_pass: 122, row_pass: 118\n    27: count: 168, col_pass: 122, row_pass: 118\n    28: count: 168, col_pass: 122, row_pass: 118\n    29: count: 168, col_pass: 122, row_pass: 118\n    30: count: 168, col_pass: 122, row_pass: 118\n    31: count: 168, col_pass: 122, row_pass: 118\n    32: count: 168, col_pass: 122, row_pass: 118\n    33: count: 168, col_pass: 122, row_pass: 118\n    34: count: 168, col_pass: 122, row_pass: 118\n    35: count: 168, col_pass: 122, row_pass: 118\n    36: count: 168, col_pass: 122, row_pass: 118\n    37: count: 168, col_pass: 122, row_pass: 118\n    38: count: 168, col_pass: 122, row_pass: 118\n    39: count: 168, col_pass: 122, row_pass: 118\n    40: count: 168, col_pass: 122, row_pass: 118\n    41: count: 168, col_pass: 122, row_pass: 118\n    42: count: 168, col_pass: 122, row_pass: 118\n    43: count: 168, col_pass: 122, row_pass: 118\n    44: count: 168, col_pass: 122, row_pass: 118\n    45: count: 168, col_pass: 122, row_pass: 118\n    46: count: 168, col_pass: 122, row_pass: 118\n    47: count: 168, col_pass: 122, row_pass: 118\n    48: count: 168, col_pass: 122, row_pass: 118\n    49: count: 168, col_pass: 122, row_pass: 118\n    50: count: 168, col_pass: 122, row_pass: 118\n    51: count: 168, col_pass: 122, row_pass: 118\n    52: count: 168, col_pass: 122, row_pass: 118\n    53: count: 168, col_pass: 122, row_pass: 118\n    54: count: 168, col_pass: 122, row_pass: 118\n    55: count: 168, col_pass: 122, row_pass: 118\n    56: count: 168, col_pass: 122, row_pass: 118\n    57: count: 168, col_pass: 122, row_pass: 118\n    58: count: 168, col_pass: 122, row_pass: 118\n    59: count: 168, col_pass: 122, row_pass: 118\n    60: count: 168, col_pass: 122, row_pass: 118\n    61: count: 168, col_pass: 122, row_pass: 118\n    62: count: 168, col_pass: 122, row_pass: 118\n    63: count: 168, col_pass: 122, row_pass: 118\n    64: count: 168, col_pass: 122, row_pass: 118\n    65: count: 168, col_pass: 122, row_pass: 118\n    66: count: 168, col_pass: 122, row_pass: 118\n    67: count: 168, col_pass: 122, row_pass: 118\n    68: count: 168, col_pass: 122, row_pass: 118\n    69: count: 168, col_pass: 122, row_pass: 118\n    70: count: 168, col_pass: 122, row_pass: 118\n    71: count: 168, col_pass: 122, row_pass: 118\n    72: count: 168, col_pass: 122, row_pass: 118\n    73: count: 168, col_pass: 122, row_pass: 118\n    74: count: 168, col_pass: 122, row_pass: 118\n    75: count: 168, col_pass: 122, row_pass: 118\n    76: count: 168, col_pass: 122, row_pass: 118\n    77: count: 168, col_pass: 122, row_pass: 118\n    78: count: 168, col_pass: 122, row_pass: 118\n    79: count: 168, col_pass: 122, row_pass: 118\n    80: count: 168, col_pass: 122, row_pass: 118\n    81: count: 168, col_pass: 122, row_pass: 118\n    82: count: 168, col_pass: 122, row_pass: 118\n    83: count: 168, col_pass: 122, row_pass: 118\n    84: count: 168, col_pass: 122, row_pass: 118\n    85: count: 168, col_pass: 122, row_pass: 118\n    86: count: 168, col_pass: 122, row_pass: 118\n    87: count: 168, col_pass: 122, row_pass: 118\n    88: count: 168, col_pass: 122, row_pass: 118\n    89: count: 168, col_pass: 122, row_pass: 118\n    90: count: 168, col_pass: 122, row_pass: 118\n    91: count: 168, col_pass: 122, row_pass: 118\n    92: count: 168, col_pass: 122, row_pass: 118\n    93: count: 168, col_pass: 122, row_pass: 118\n    94: count: 168, col_pass: 122, row_pass: 118\n    95: count: 168, col_pass: 122, row_pass: 118\n    96: count: 168, col_pass: 122, row_pass: 118\n    97: count: 168, col_pass: 122, row_pass: 118\n    98: count: 168, col_pass: 122, row_pass: 118\n    99: count: 168, col_pass: 122, row_pass: 118\n    100: count: 168, col_pass: 122, row_pass: 118\n    \n]\n\n]\n"}, "json://6": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 6, "_purpose": "OB_HBO", "_time_period": "AM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: AM_peak_hr\npurpose: OB_HBO\nlevel: 6\nzone_count: 168\nmatrix_sum: 232.3966957741366\ninterzonal_sum: 230.87156062143575\nintrazonal_sum: 1.525135152700829\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: AM_peak_hr\n    purpose: OB_HBO\n    level: 6\n    zone_count: 168\n    matrix_sum: 232.3966957741366\n    interzonal_sum: 230.87156062143575\n    intrazonal_sum: 1.525135152700829\n    Comments:\n    Created by furness_matrix operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: AM_peak_hr\n        purpose: OB_HBO\n        level: 4\n        zone_count: 168\n        matrix_sum: 364.0\n        interzonal_sum: 360.77429216006425\n        intrazonal_sum: 3.225707839935766\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: AM_peak_hr\n            purpose: OB_HBO\n            level: 4\n            zone_count: 168\n            matrix_sum: 364.0\n            interzonal_sum: 360.77429216006425\n            intrazonal_sum: 3.225707839935766\n            Comments:\n            Created by disaggregate_matrix operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: AM_peak_hr\n                purpose: OB_HBO\n                level: 4\n                zone_count: 120\n                matrix_sum: 364.0\n                interzonal_sum: 363.0\n                intrazonal_sum: 1.0\n                Comments:\n                Created by copy operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: AM_peak_hr\n                    purpose: OB_HBO\n                    level: 4\n                    zone_count: 120\n                    matrix_sum: 364.0\n                    interzonal_sum: 363.0\n                    intrazonal_sum: 1.0\n                    Comments:\n                    Created by operation <built-in function mul> (reverse: False) on\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: AM_peak_hr\n                        purpose: OB_HBO\n                        level: 4\n                        zone_count: 120\n                        matrix_sum: 364.0\n                        interzonal_sum: 363.0\n                        intrazonal_sum: 1.0\n                        Comments:\n                        Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_OB_HBO_Rail.csv\n                        MND Raw Data\n                        \n                    ]\n                    <built-in function mul>\n                    [\n                        1.0\n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    Convergence Information:\n    1: count: 168, col_pass: 93, row_pass: 7\n    2: count: 168, col_pass: 96, row_pass: 8\n    3: count: 168, col_pass: 93, row_pass: 9\n    4: count: 168, col_pass: 94, row_pass: 29\n    5: count: 168, col_pass: 98, row_pass: 51\n    6: count: 168, col_pass: 121, row_pass: 163\n    7: count: 168, col_pass: 121, row_pass: 163\n    8: count: 168, col_pass: 151, row_pass: 167\n    9: count: 168, col_pass: 153, row_pass: 168\n    \n]\n\n]\n"}, "json://7": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 7, "_purpose": "NHBW", "_time_period": "AM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: AM_peak_hr\npurpose: NHBW\nlevel: 7\nzone_count: 168\nmatrix_sum: 134.0\ninterzonal_sum: 132.78111793124762\nintrazonal_sum: 1.2188820687523887\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: AM_peak_hr\n    purpose: NHBW\n    level: 7\n    zone_count: 168\n    matrix_sum: 134.0\n    interzonal_sum: 132.78111793124762\n    intrazonal_sum: 1.2188820687523887\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: AM_peak_hr\n        purpose: NHBW\n        level: 5\n        zone_count: 168\n        matrix_sum: 134.0\n        interzonal_sum: 132.78111793124762\n        intrazonal_sum: 1.2188820687523887\n        Comments:\n        Created by disaggregate_matrix operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: AM_peak_hr\n            purpose: NHBW\n            level: 5\n            zone_count: 120\n            matrix_sum: 134.0\n            interzonal_sum: 133.0\n            intrazonal_sum: 1.0\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: AM_peak_hr\n                purpose: NHBW\n                level: 5\n                zone_count: 120\n                matrix_sum: 134.0\n                interzonal_sum: 133.0\n                intrazonal_sum: 1.0\n                Comments:\n                Created by operation <built-in function mul> (reverse: False) on\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: AM_peak_hr\n                    purpose: NHBW\n                    level: 5\n                    zone_count: 120\n                    matrix_sum: 134.0\n                    interzonal_sum: 133.0\n                    intrazonal_sum: 1.0\n                    Comments:\n                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_NHBW_Rail.csv\n                    MND Raw Data\n                    \n                ]\n                <built-in function mul>\n                [\n                    1.0\n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n"}, "json://8": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 8, "_purpose": "NHBO", "_time_period": "AM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: AM_peak_hr\npurpose: NHBO\nlevel: 8\nzone_count: 168\nmatrix_sum: 177.99999999999997\ninterzonal_sum: 177.78111762245277\nintrazonal_sum: 0.21888237754720338\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: AM_peak_hr\n    purpose: NHBO\n    level: 8\n    zone_count: 168\n    matrix_sum: 177.99999999999997\n    interzonal_sum: 177.78111762245277\n    intrazonal_sum: 0.21888237754720338\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: AM_peak_hr\n        purpose: NHBO\n        level: 6\n        zone_count: 168\n        matrix_sum: 177.99999999999997\n        interzonal_sum: 177.78111762245277\n        intrazonal_sum: 0.21888237754720338\n        Comments:\n        Created by disaggregate_matrix operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: AM_peak_hr\n            purpose: NHBO\n            level: 6\n            zone_count: 120\n            matrix_sum: 178.0\n            interzonal_sum: 177.0\n            intrazonal_sum: 1.0\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: AM_peak_hr\n                purpose: NHBO\n                level: 6\n                zone_count: 120\n                matrix_sum: 178.0\n                interzonal_sum: 177.0\n                intrazonal_sum: 1.0\n                Comments:\n                Created by operation <built-in function mul> (reverse: False) on\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: AM_peak_hr\n                    purpose: NHBO\n                    level: 6\n                    zone_count: 120\n                    matrix_sum: 178.0\n                    interzonal_sum: 177.0\n                    intrazonal_sum: 1.0\n                    Comments:\n                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_NHBO_Rail.csv\n                    MND Raw Data\n                    \n                ]\n                <built-in function mul>\n                [\n                    1.0\n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n"}}}