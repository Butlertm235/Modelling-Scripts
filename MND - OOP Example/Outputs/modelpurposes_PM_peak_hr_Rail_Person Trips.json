{"py/object": "matrix_class_v2.MatrixStack", "_name": "modelpurposes", "_vehicle_type": "Rail", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"json://501": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 501, "_targets": {"json://501": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://502": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 502, "_targets": {"json://502": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://504": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 504, "_targets": {"json://504": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://505": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 505, "_targets": {"json://505": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://506": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 506, "_targets": {"json://506": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://509": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 509, "_targets": {"json://509": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://511": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 511, "_targets": {"json://511": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://512": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 512, "_targets": {"json://512": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://513": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 513, "_targets": {"json://513": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://514": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 514, "_targets": {"json://514": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://515": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 515, "_targets": {"json://515": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://516": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 516, "_targets": {"json://516": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://517": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 517, "_targets": {"json://517": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://519": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 519, "_targets": {"json://519": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://520": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 520, "_targets": {"json://520": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://521": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 521, "_targets": {"json://521": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://523": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 523, "_targets": {"json://523": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://524": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 524, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://525": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 525, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://526": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 526, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://527": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 527, "_targets": {"json://527": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://528": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 528, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://531": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 531, "_targets": {"json://531": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://532": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 532, "_targets": {"json://532": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://533": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 533, "_targets": {"json://533": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://534": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 534, "_targets": {"json://534": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://535": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 535, "_targets": {"json://535": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://536": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 536, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://537": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 537, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://538": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 538, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://539": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 539, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://540": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 540, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://541": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 541, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://542": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 542, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://543": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 543, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://544": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 544, "_targets": {"json://544": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://545": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 545, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://546": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 546, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://547": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 547, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://548": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 548, "_targets": {"json://548": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://551": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 551, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://562": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 562, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://566": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 566, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://567": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 567, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://570": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 570, "_targets": {"json://570": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://571": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 571, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://572": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 572, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://573": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 573, "_targets": {"json://573": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://601": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 601, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://602": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 602, "_targets": {"json://602": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://603": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 603, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://604": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 604, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://605": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 605, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://606": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 606, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://607": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 607, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://608": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 608, "_targets": {"json://608": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://609": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 609, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://610": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 610, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5001": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5001, "_targets": {"json://9009": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5002": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5002, "_targets": {"json://5002": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5003": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5003, "_targets": {"json://5003": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5004": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5004, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5005": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5005, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7105265186923027}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.2894734813076974}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5006": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5006, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.6336305213085214}, "json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.3663694786914786}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5007": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5007, "_targets": {"json://5007": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5008": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5008, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5009": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5009, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.12574033987473257}, "json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8742596601252675}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5010": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5010, "_targets": {"json://5010": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5011": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5011, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5012": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5012, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5013": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5013, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5014": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5014, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5015": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5015, "_targets": {"json://5015": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5016": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5016, "_targets": {"json://5019": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.23915238262142025}, "json://5133": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7608476173785798}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5017": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5017, "_targets": {"json://5068": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5018": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5018, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5019": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5019, "_targets": {"json://5133": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7224258444377175}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5020": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5020, "_targets": {"json://5020": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5021": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5021, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5022": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5022, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5023": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5023, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.16270700178727196}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8372929982127281}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5024": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5024, "_targets": {"json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5025": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5025, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.5924220607039576}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.40757793929604236}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5026": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5026, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5027": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5027, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5028": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5028, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8675205867701657}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.13247941322983423}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5029": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5029, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.5147106005829688}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.48528939941703114}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5030": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5030, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.38833292989011636}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.6116670701098836}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5031": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5031, "_targets": {"json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9863284020535221}, "json://5133": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.013671597946477902}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5032": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5032, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5033": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5033, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5034": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5034, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5035": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5035, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5036": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5036, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5037": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5037, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5038": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5038, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5039": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5039, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5040": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5040, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5041": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5041, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5042": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5042, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5043": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5043, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5045": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5045, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5046": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5046, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5047": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5047, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5048": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5048, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5049": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5049, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5050": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5050, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5051": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5051, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5052": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5052, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5053": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5053, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5054": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5054, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5055": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5055, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5056": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5056, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5065": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5065, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5067": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5067, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.06201399661995637}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9379860033800437}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5068": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5068, "_targets": {"json://5068": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5069": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5069, "_targets": {"json://5069": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5070": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5070, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5100": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5100, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5101": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5101, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5102": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5102, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5103": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5103, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5104": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5104, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5105": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5105, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5106": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5106, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5107": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5107, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.29235456942551624}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7076454305744838}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5108": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5108, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5109": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5109, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5110": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5110, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7387638702178395}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.26123612978216043}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5111": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5111, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.2515912022033352}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7484087977966648}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5112": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5112, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5115": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5115, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.22736056963670478}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7726394303632952}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5116": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5116, "_targets": {"json://5116": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5117": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5117, "_targets": {"json://5139": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.28054378071849867}, "json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7194562192815013}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5118": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5118, "_targets": {"json://5118": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5119": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5119, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5120": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5120, "_targets": {"json://5121": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5121": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5121, "_targets": {"json://5121": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5122": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5122, "_targets": {"json://5122": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5124": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5124, "_targets": {"json://5122": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.4437572194572055}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5125": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5125, "_targets": {"json://5124": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.13644820554642537}, "json://5003": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8635517944535747}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5126": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5126, "_targets": {"json://5132": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5127": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5127, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5128": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5128, "_targets": {"json://5132": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.028333630736165107}, "json://5003": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9716663692638349}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5129": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5129, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.11436485547237808}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8856351445276219}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5130": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5130, "_targets": {"json://5132": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.29984251486319297}, "json://5003": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7001574851368071}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5131": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5131, "_targets": {"json://5131": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5132": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5132, "_targets": {"json://5132": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5133": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5133, "_targets": {"json://5133": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5134": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5134, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.32382409830106296}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.676175901698937}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5135": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5135, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.08645655874211541}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9135434412578846}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5136": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5136, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.239089678008408}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5137": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5137, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5138": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5138, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5139": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5139, "_targets": {"json://5068": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5140": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5140, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5141": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5141, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.2216693993246311}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.778330600675369}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5142": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5142, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.026609684324048147}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9733903156759518}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5143": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5143, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.0716213365076186}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9283786634923814}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9001": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9001, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9002": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9002, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9003": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9003, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9004": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9004, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9005": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9005, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9006": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9006, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9007": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9007, "_targets": {"json://9009": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9008": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9008, "_targets": {"json://9009": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9009": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9009, "_targets": {"json://9009": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}}}, "_zones": {"py/object": "pandas.core.frame.DataFrame", "comp": true, "values": "eJy9W0uP28gRvi+w/0G3vfDQVf2o7muAZBEkyCEPBDkZyoy8FnYsBZIcr/PrU1USu0kNRTbJ1WIAe8bW9Mfqrv7qqwf3h9fdL83nw+uH/x0Pu+aXDy/H4+m1+Xb7e3vabT+cdh+b8+7lcjw1n8/HbfO6P19O+5dL84/Tv7eHzcv+8m2zPbxuLsevh+avX07bt81/929v2592t58+bT+/7S5n/dD+fHzbXnavm9evu7e3/eGn8+1D8tv6iY8n/tddf6HNnv9vc/7P9nTebc67y4U/UrX4yC/eAQ5+8otYeJKPNy+8H8fDh/3hsDu1Pxy/XPiHPx74z8P27fvvTAPGp8YHIG8aCyk42/zeoDGe/63xzZ940R/Omz9/O1yh/7k7XzZ/OZ4+Ht9+3hiA5nen4/b1Tf6rgcZ0vvRJmv3hvH/dtX/9/fRl9/13kEFDYlA0DuNiUKwExRYUjU0CimCebqkt25ucgqbloKb3dT3jIVCXLUX0ur1u+fbWWuozqIuklkZ4OmjIoNao90ZY7r2120vF0mD1yuByS12lpVFASUH5MBkUXWpB5WEmQE1asr2pXJlAAuqMf7qlUCgpeS+oZJe7r61FLZxEpP5rAJ9PhB1SutJv8s93YLDZmSKhEkSipzsTuIxKxipDOL8YtZb1wWfUZPS2elxua7U3ZWKCmNSHgc2fda78/df9y6cZ+0sdTGDMCDTz3mTMak+KGdMbxXR+OUNUW5p5yZBXMhTwp+uHwkuQNKxCeL5UwsxLxke2FQFDeD6q8pKXWwNGxVLE7L9ym6ZuDS1CtRnVsngQ1ECLUWvjDbqMSlF5KfnlqNXe5DOqwSCoAZejVu9wKDtsNMoFk56PShnVg6hgcGE5avW5xhaVtaGi2hifj5oKqp4rJLsctTrNUG5yghr1vrJoKrE1TKOGLmqsRYWM6p14E3iAxai1sdVii+o8KCMm5xajplpU26J6G9Sb+ICfb6vLqCGJN6GhmbbO1hE2Kybr9N4wH8Z5imk+pvJSlDPFoIo0FUUazHSUMwWTajGpxfRoNZ5TwnmYS25qLJayJ4vihzQXdffy8w3V1MKmfKj+mimnjiPNlcG1BOGKZFL3ZXk4V5IuCK2upHIxOkH1cab4XnCwLqdyzL1qa/wN6ksuF5gQnQpwVuLPRy0VppsUNvAbnGshpuCUmGKaSUxLbC3URBpuDPPiYpqotrVTZLLXcgQtP9c+S4wUDjvpnCQbfGt/5SLe8ctlADbnc9ZeK2pgZxtbOLFyi30mJ0wsR/nqkF9e8andYp/JCUmrW9GtqB5Wo5Y6E2evjEoUZto6uzbghZoYhS+O0UjnQywx3U1jugWYOZfjFEOIidNl+3T17XMuB2Sviqnsbh3qfEtD3l0A9SNDMG93l/gRtajWRglyAWOai5pvqunt8Agq01LjERMzIetuJmD+uG2mDGi5pv37D9u3s6wmkcKr/mqQHCBdVysC0jTMSFIWQKxZMAiRMF1qu4UvF3/vcokm8X8WEX7nYDVPfWt0yB3lJMtHvknG2/R+C4YymUdPLHQgx+VNBI4uvKNU6GA6rYDQPcahZOaBFbbFRcvPgImYjubidnZPHA5qdk8+yJuWnICGZNO73WN06ETn8e3zehjsHpGXA0M04I+yGlQ5pBrOywF/g9E779a4d9ArqmSEoleYe0PRodNkBD0PtUN1jwebLOKBL44ng8Tx1EGIhXunY4wZjGx8Cxt+pNHTVfnAm8juLCEVbSxNFFFuU8CxDxz4yw5udb8NqPpBuDBRYnvlWpaKwDQXmgEGBho94huwSgje0EDSebSWPJXSoZ0Gto9ci/1lFBiFh1k6cOoodWgf1zgq2UacxSKrTqQQjX+3mmQ3chrBVy2ot9wIDTN785Jh1ePpJWcz0cjjMWWtWk3CNbCzRL4VIMxnSvOAo2LqEKp8rqdC+BZPUcntgOTuc5DkVCUakVzMBDkSMelR8+Npt71s/rU9febflHiEy+IRxfbORUm9tGCDK+6celbFndPYbUOQQ0lp0GfUjWMu2I4yeZQ7zAchBIWS8DjZvpYs/TRZ+r6e8WzIuGa4dfOv4TwiSQRhvhyi/KvDVThXxFaVea2esQAple4FqsxXOkHMCj+AzHywNEszFf5dOIcHuP1RCBH5knlzfCFtrqIpGTlOw+J736uBvUZ9D/aq8fA9vYR0O7Ya1ws3LeRikAzfUESzWAt1j2w8TEdSM9BJzRNsgPfihbmGOg2Pcd8TIhBZERIwEWBCifWtGdNFGUh3sok1UK4vjjqfRn32gojRWgm/oTCqn/aCe+YD9QKnxzeGm5QyQLQzeKkuku1UF6ejL9xFX//Q++5wISd8RFLBZZq1Ky5bXeqV8CZyiF1eRvU8dVo8lSKnQy2uky2MWqt1TSvUEiW95XhexnH8NDEbP2Xt4B1ProWFKPEA2auXww51IoZhfc6LkPNO1uxyLZfnRRwDqsJQCq25eG27WFbti82tniqjFtUlrW1a3ufFqLWttBRbVH+tHmPotEifhpqyrRi1gUdhua31I3Qmwyo5srF2ubHVs1acwklAcyZE7VWqbsfmPso7YfmK2ALM0bJe0tk4lMRuYD2JXlClk1gbCzqKZm1sMN4Pr1ep6TnbleUsL8fPYFnGD5k7Yzkvy4XABsvTCWOvWi7IckzSvDmWj4RWLke6XJIGtDUuQlq3nCh0jmQy+Y0s5ADXLZfEU9CDVvJBqq5rlgN1Uz4DCQImiuRbtZzeC4OeFZ4lJ359W64TGmcsp9eCxRsIZ3up79w/HXMs/6s1kg5VLZmlPJ+t18Iu+pXqol+ZGx66dS0sRHkTAFzqiKllVezhguAd7k3LRyYqljRDWn7WgWgFD6IMGMnYjzXrlstVdudQ/Dl4mr0ro541fBhR3YoZQ73U+fduNcsKvZIWdQDWWVrp9KhXMrEOlXjGe+LWLQe39IES7y7Td7KdAsaS9EF9z6v2GtNccJ2tlPJdDDJfw9AU5pbvepL6ht2MV+9Axyslb+azJa3ZCKnPzJs7wLzcRH2iBc4Je4J2Om0NMD085bvhep/rIiQ7zT5kZ5NaBxcnvasFDu1OG2k5MK1R8CsMxg70ODDdgCM4HfMJaeUR11oc20IaI1/rI2l2Ia1HM3VZMei85RWYzLWiEddU8B4Xg+6AdeTyGjHdtQ7gVjhX9ei7bcsABCQVHJMI13Rg5YTHq+stMDZSWLZRmrBRhpzaGLeIf2WeUgeCA7D+82ZdeR1kUJIVTwq8PxzQmeHWLefL0I+ocRnpKoc7ezawDz12ukocqfEc50R6chpQXvMitlA6yZdPj8NQ4o+AUKyA8kUcP1JhC7JNYN+VtxOtlnFbND+AFuZuaIsk9MCcHzBd34NMNub9pPQeqb+Bc5CED6Jpgo3XIIc25ZJGxAGkh92wCSQdbmQZEVCyIR2pLFPtqDlpWXiw21cHIxeesyWfQtDKc2JyzZ0j0+8c9dsqIm6DdEMg9lzvEZI4jZEeVdDXcoG8zxVpfv7YQ7ovokOTbppgyiCRIeyjwZDR8g9AKXyLLOvv2z0OW8N3vabrDzqmyPGPYxKnFxKUqFA0C5G+Qe8mM0BmQGpgmCykFsCOQCwlMUEJQWykPOzftNs2Y4jrEZTwA3NdYDkt76oYF4p2FPLoetldK38OjBADCKGiEDMml0rVF+xdt7JnTLJCO3zGoQ5JiEGyseiBZPzBdl754efvI70TCbX2pLZmz7mV0LmhztDd3Jq9a6jTbxkF9m1/MRhN1vlJyrsKC2TRYwV699IjtLisAKUz13trbJkcGy/ZtcDaigwaOKUUw97R2enpvjD0CMwKc1VKX59ni4KUkzkNxzB7pqmX0NV1KkC7INJQ43QDvZq9RnroMKHmDoFk2AtkJ1d0Nx93Pu7tyBOFVspB2hv8dRtMD3y1zBQafZvTS2hdV+3o8/bwe8Gx6HedlWAqXSOkuznLGGyS3kyInjHJW5G/8ntLvUWKfI1jv5fJiJDEVVYtJ15vvb434QKnkyuXk2KIdMxZuDiO7SauW066WkiJnIzkAGkXYXmBKkiz10aN1pzRxJVF3qC1H0hORglRBnLXLScDiV7CBjuqd3ZliZKjatCasSSQlIILek0WLvd/pZs0hQ==", "txt": false, "meta": {"dtypes": {"index": "int64", "mnd_zone": "int64", "x_coord": "int64", "y_coord": "int64", "area_ref": "object", "sector": "int64", "msoa": "object", "district": "object", "Urban city and town": "int64", "Rural village": "int64", "Rural hamlets and isolated dwellings": "int64", "Rural town and fringe": "int64", "Rural village in a sparse setting": "int64", "Rural hamlets and isolated dwellings in a sparse setting": "int64", "Rural town and fringe in a sparse setting": "int64", "urbanrural": "object", "cordon_inner": "object", "cordon_outer": "object", "Internal": "bool"}, "index": "{\"py/object\": \"pandas.core.indexes.numeric.Int64Index\", \"comp\": true, \"values\": \"eJwtk8FtRSEQA1tJATnYsMCnlij9txE8m4ulp7VXMPj9LPn7a2lEKrIiO3KfOFNn6hmJxbE4Fp9IfEORmEd8I74R34hvxDc+T2YsM/tmfDO+Gd+Mb8Y38WVpZWklUUlUEpVEJVFJVBKVxIpvx7cz2BmcLDgZnAzOW7Bz3537bvFZkRXZkRP5RN4JtrNAjagZJfQUVM2qYSX49IPm8OosAAVBgVAwFBAFRYFRJgtNgVOjn4YsWAVXAVaQFWgFWw2ykyygBWmBWrAWsAVtgVvwFsAFcYFc1Z0gC3BBXCAXzFWkFikeQIvUIrW6UGQX2d3tYsNmw2YDD2W1UjloG9qGtqFtaBvahrb/e0q269p97Zp2T7uoEDaEDWGPrjd+2Bq2hq1ha9gatoatYevZfwUnhK1ha9gatoatYWvYGraGrcP20q5Luy7turTr0q5Luy7turTr6f39AzjkrWM=\", \"txt\": false, \"meta\": {\"dtype\": \"int64\", \"name\": \"reference\"}}", "column_level_names": [null], "header": [0]}}, "_source_file": {"py/reduce": [{"py/type": "pathlib.WindowsPath"}, {"py/tuple": ["C:\\", "Users", "UKTMB001", "Documents", "Python Scripts", "MND", "ZoningTemplate_Model_v2.xlsx"]}]}, "_source_sheet": "zones"}, "_time_period": "PM_peak_hr", "_value_type": "Person Trips", "_levels": {"json://1": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "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", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 1, "_purpose": "Commuting", "_time_period": "PM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by operation <built-in function add> (reverse: False) on\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: PM_peak_hr\npurpose: Commuting\nlevel: 1\nzone_count: 168\nmatrix_sum: 379.0\ninterzonal_sum: 362.5667186230245\nintrazonal_sum: 16.43328137697551\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: PM_peak_hr\n    purpose: IB_HBW\n    level: 1\n    zone_count: 168\n    matrix_sum: 379.0\n    interzonal_sum: 362.5667186230245\n    intrazonal_sum: 16.43328137697551\n    Comments:\n    Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: PM_peak_hr\n        purpose: IB_HBW\n        level: 1\n        zone_count: 168\n        matrix_sum: 379.0\n        interzonal_sum: 375.56872217607577\n        intrazonal_sum: 3.4312778239242165\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: PM_peak_hr\n            purpose: IB_HBW\n            level: 1\n            zone_count: 168\n            matrix_sum: 379.0\n            interzonal_sum: 375.56872217607577\n            intrazonal_sum: 3.4312778239242165\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: PM_peak_hr\n                purpose: IB_HBW\n                level: 1\n                zone_count: 168\n                matrix_sum: 379.0\n                interzonal_sum: 375.56872217607577\n                intrazonal_sum: 3.4312778239242165\n                Comments:\n                Created by disaggregate_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: PM_peak_hr\n                    purpose: IB_HBW\n                    level: 1\n                    zone_count: 120\n                    matrix_sum: 379.0\n                    interzonal_sum: 377.0\n                    intrazonal_sum: 2.0\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: PM_peak_hr\n                        purpose: IB_HBW\n                        level: 1\n                        zone_count: 120\n                        matrix_sum: 379.0\n                        interzonal_sum: 377.0\n                        intrazonal_sum: 2.0\n                        Comments:\n                        Created by operation <built-in function mul> (reverse: False) on\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: PM_peak_hr\n                            purpose: IB_HBW\n                            level: 1\n                            zone_count: 120\n                            matrix_sum: 379.0\n                            interzonal_sum: 377.0\n                            intrazonal_sum: 2.0\n                            Comments:\n                            Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_IB_HBW_Rail.csv\n                            MND Raw Data\n                            \n                        ]\n                        <built-in function mul>\n                        [\n                            1.0\n                        ]\n                        \n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n<built-in function add>\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: PM_peak_hr\npurpose: OB_HBW\nlevel: 2\nzone_count: 168\nmatrix_sum: 6.0\ninterzonal_sum: 6.0\nintrazonal_sum: 0.0\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: PM_peak_hr\n    purpose: OB_HBW\n    level: 2\n    zone_count: 168\n    matrix_sum: 6.0\n    interzonal_sum: 6.0\n    intrazonal_sum: 0.0\n    Comments:\n    Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: PM_peak_hr\n        purpose: OB_HBW\n        level: 2\n        zone_count: 168\n        matrix_sum: 6.0\n        interzonal_sum: 6.0\n        intrazonal_sum: 0.0\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: PM_peak_hr\n            purpose: OB_HBW\n            level: 2\n            zone_count: 168\n            matrix_sum: 6.0\n            interzonal_sum: 6.0\n            intrazonal_sum: 0.0\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: PM_peak_hr\n                purpose: OB_HBW\n                level: 2\n                zone_count: 168\n                matrix_sum: 6.0\n                interzonal_sum: 6.0\n                intrazonal_sum: 0.0\n                Comments:\n                Created by disaggregate_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: PM_peak_hr\n                    purpose: OB_HBW\n                    level: 2\n                    zone_count: 120\n                    matrix_sum: 6.0\n                    interzonal_sum: 6.0\n                    intrazonal_sum: 0.0\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: PM_peak_hr\n                        purpose: OB_HBW\n                        level: 2\n                        zone_count: 120\n                        matrix_sum: 6.0\n                        interzonal_sum: 6.0\n                        intrazonal_sum: 0.0\n                        Comments:\n                        Created by operation <built-in function mul> (reverse: False) on\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: PM_peak_hr\n                            purpose: OB_HBW\n                            level: 2\n                            zone_count: 120\n                            matrix_sum: 6.0\n                            interzonal_sum: 6.0\n                            intrazonal_sum: 0.0\n                            Comments:\n                            Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_OB_HBW_Rail.csv\n                            MND Raw Data\n                            \n                        ]\n                        <built-in function mul>\n                        [\n                            1.0\n                        ]\n                        \n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n"}, "json://2": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 2, "_purpose": "Employers Business", "_time_period": "PM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by operation <built-in function add> (reverse: False) on\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: PM_peak_hr\npurpose: Employers Business\nlevel: 3\nzone_count: 168\nmatrix_sum: 120.59468575904451\ninterzonal_sum: 116.9509800006325\nintrazonal_sum: 3.6437057584120134\nComments:\nCreated by operation <built-in function add> (reverse: False) on\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: PM_peak_hr\n    purpose: Employers Business\n    level: 3\n    zone_count: 168\n    matrix_sum: 100.94330768069374\n    interzonal_sum: 97.839871794207\n    intrazonal_sum: 3.1034358864867424\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: PM_peak_hr\n        purpose: IB_HBEmp\n        level: 3\n        zone_count: 168\n        matrix_sum: 100.94330768069374\n        interzonal_sum: 97.839871794207\n        intrazonal_sum: 3.1034358864867424\n        Comments:\n        Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: PM_peak_hr\n            purpose: IB_HBEmp\n            level: 3\n            zone_count: 168\n            matrix_sum: 100.94330768069372\n            interzonal_sum: 100.65592371980048\n            intrazonal_sum: 0.287383960893234\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: PM_peak_hr\n                purpose: IB_HBEmp\n                level: 3\n                zone_count: 168\n                matrix_sum: 100.94330768069372\n                interzonal_sum: 100.65592371980048\n                intrazonal_sum: 0.287383960893234\n                Comments:\n                Created by furness_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: PM_peak_hr\n                    purpose: IB_HBO\n                    level: 3\n                    zone_count: 168\n                    matrix_sum: 424.00000000000006\n                    interzonal_sum: 421.3228816821991\n                    intrazonal_sum: 2.6771183178009266\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: PM_peak_hr\n                        purpose: IB_HBO\n                        level: 3\n                        zone_count: 168\n                        matrix_sum: 424.00000000000006\n                        interzonal_sum: 421.3228816821991\n                        intrazonal_sum: 2.6771183178009266\n                        Comments:\n                        Created by disaggregate_matrix operation on the following matrix:\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: PM_peak_hr\n                            purpose: IB_HBO\n                            level: 3\n                            zone_count: 120\n                            matrix_sum: 424.0\n                            interzonal_sum: 421.0\n                            intrazonal_sum: 3.0\n                            Comments:\n                            Created by copy operation on the following matrix:\n                            [\n                                Matrix Object\n                                vehicle_type: Rail\n                                value_type: Person Trips\n                                time_period: PM_peak_hr\n                                purpose: IB_HBO\n                                level: 3\n                                zone_count: 120\n                                matrix_sum: 424.0\n                                interzonal_sum: 421.0\n                                intrazonal_sum: 3.0\n                                Comments:\n                                Created by operation <built-in function mul> (reverse: False) on\n                                [\n                                    Matrix Object\n                                    vehicle_type: Rail\n                                    value_type: Person Trips\n                                    time_period: PM_peak_hr\n                                    purpose: IB_HBO\n                                    level: 3\n                                    zone_count: 120\n                                    matrix_sum: 424.0\n                                    interzonal_sum: 421.0\n                                    intrazonal_sum: 3.0\n                                    Comments:\n                                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_IB_HBO_Rail.csv\n                                    MND Raw Data\n                                    \n                                ]\n                                <built-in function mul>\n                                [\n                                    1.0\n                                ]\n                                \n                            ]\n                            \n                        ]\n                        \n                    ]\n                    \n                ]\n                Convergence Information:\n                1: count: 168, col_pass: 32, row_pass: 61\n                2: count: 168, col_pass: 22, row_pass: 60\n                3: count: 168, col_pass: 22, row_pass: 76\n                4: count: 168, col_pass: 23, row_pass: 78\n                5: count: 168, col_pass: 39, row_pass: 82\n                6: count: 168, col_pass: 39, row_pass: 90\n                7: count: 168, col_pass: 49, row_pass: 110\n                8: count: 168, col_pass: 160, row_pass: 119\n                9: count: 168, col_pass: 168, row_pass: 168\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n<built-in function add>\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: PM_peak_hr\n    purpose: OB_HBEmp\n    level: 4\n    zone_count: 168\n    matrix_sum: 19.651378078350774\n    interzonal_sum: 19.111108206425502\n    intrazonal_sum: 0.5402698719252714\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: PM_peak_hr\n        purpose: OB_HBEmp\n        level: 4\n        zone_count: 168\n        matrix_sum: 19.651378078350774\n        interzonal_sum: 19.111108206425502\n        intrazonal_sum: 0.5402698719252714\n        Comments:\n        Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: PM_peak_hr\n            purpose: OB_HBEmp\n            level: 4\n            zone_count: 168\n            matrix_sum: 19.651378078350774\n            interzonal_sum: 19.57580416937806\n            intrazonal_sum: 0.07557390897271418\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: PM_peak_hr\n                purpose: OB_HBEmp\n                level: 4\n                zone_count: 168\n                matrix_sum: 19.651378078350774\n                interzonal_sum: 19.57580416937806\n                intrazonal_sum: 0.07557390897271418\n                Comments:\n                Created by furness_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: PM_peak_hr\n                    purpose: OB_HBO\n                    level: 4\n                    zone_count: 168\n                    matrix_sum: 87.0\n                    interzonal_sum: 86.22218816515077\n                    intrazonal_sum: 0.7778118348492377\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: PM_peak_hr\n                        purpose: OB_HBO\n                        level: 4\n                        zone_count: 168\n                        matrix_sum: 87.0\n                        interzonal_sum: 86.22218816515077\n                        intrazonal_sum: 0.7778118348492377\n                        Comments:\n                        Created by disaggregate_matrix operation on the following matrix:\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: PM_peak_hr\n                            purpose: OB_HBO\n                            level: 4\n                            zone_count: 120\n                            matrix_sum: 87.0\n                            interzonal_sum: 85.0\n                            intrazonal_sum: 2.0\n                            Comments:\n                            Created by copy operation on the following matrix:\n                            [\n                                Matrix Object\n                                vehicle_type: Rail\n                                value_type: Person Trips\n                                time_period: PM_peak_hr\n                                purpose: OB_HBO\n                                level: 4\n                                zone_count: 120\n                                matrix_sum: 87.0\n                                interzonal_sum: 85.0\n                                intrazonal_sum: 2.0\n                                Comments:\n                                Created by operation <built-in function mul> (reverse: False) on\n                                [\n                                    Matrix Object\n                                    vehicle_type: Rail\n                                    value_type: Person Trips\n                                    time_period: PM_peak_hr\n                                    purpose: OB_HBO\n                                    level: 4\n                                    zone_count: 120\n                                    matrix_sum: 87.0\n                                    interzonal_sum: 85.0\n                                    intrazonal_sum: 2.0\n                                    Comments:\n                                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_OB_HBO_Rail.csv\n                                    MND Raw Data\n                                    \n                                ]\n                                <built-in function mul>\n                                [\n                                    1.0\n                                ]\n                                \n                            ]\n                            \n                        ]\n                        \n                    ]\n                    \n                ]\n                Convergence Information:\n                1: count: 168, col_pass: 86, row_pass: 123\n                2: count: 168, col_pass: 87, row_pass: 124\n                3: count: 168, col_pass: 104, row_pass: 110\n                4: count: 168, col_pass: 102, row_pass: 109\n                5: count: 168, col_pass: 99, row_pass: 110\n                6: count: 168, col_pass: 101, row_pass: 111\n                7: count: 168, col_pass: 102, row_pass: 112\n                8: count: 168, col_pass: 106, row_pass: 113\n                9: count: 168, col_pass: 112, row_pass: 148\n                10: count: 168, col_pass: 134, row_pass: 148\n                11: count: 168, col_pass: 135, row_pass: 150\n                12: count: 168, col_pass: 135, row_pass: 150\n                13: count: 168, col_pass: 135, row_pass: 153\n                14: count: 168, col_pass: 135, row_pass: 153\n                15: count: 168, col_pass: 135, row_pass: 153\n                16: count: 168, col_pass: 166, row_pass: 153\n                17: count: 168, col_pass: 166, row_pass: 168\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n<built-in function add>\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: PM_peak_hr\npurpose: NHBW\nlevel: 7\nzone_count: 168\nmatrix_sum: 110.0\ninterzonal_sum: 106.5186950002979\nintrazonal_sum: 3.4813049997020977\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: PM_peak_hr\n    purpose: NHBW\n    level: 7\n    zone_count: 168\n    matrix_sum: 110.0\n    interzonal_sum: 106.5186950002979\n    intrazonal_sum: 3.4813049997020977\n    Comments:\n    Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: PM_peak_hr\n        purpose: NHBW\n        level: 7\n        zone_count: 168\n        matrix_sum: 110.0\n        interzonal_sum: 109.56223570809782\n        intrazonal_sum: 0.4377642919021845\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: PM_peak_hr\n            purpose: NHBW\n            level: 7\n            zone_count: 168\n            matrix_sum: 110.0\n            interzonal_sum: 109.56223570809782\n            intrazonal_sum: 0.4377642919021845\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: PM_peak_hr\n                purpose: NHBW\n                level: 5\n                zone_count: 168\n                matrix_sum: 110.0\n                interzonal_sum: 109.56223570809782\n                intrazonal_sum: 0.4377642919021845\n                Comments:\n                Created by disaggregate_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: PM_peak_hr\n                    purpose: NHBW\n                    level: 5\n                    zone_count: 120\n                    matrix_sum: 110.0\n                    interzonal_sum: 108.0\n                    intrazonal_sum: 2.0\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: PM_peak_hr\n                        purpose: NHBW\n                        level: 5\n                        zone_count: 120\n                        matrix_sum: 110.0\n                        interzonal_sum: 108.0\n                        intrazonal_sum: 2.0\n                        Comments:\n                        Created by operation <built-in function mul> (reverse: False) on\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: PM_peak_hr\n                            purpose: NHBW\n                            level: 5\n                            zone_count: 120\n                            matrix_sum: 110.0\n                            interzonal_sum: 108.0\n                            intrazonal_sum: 2.0\n                            Comments:\n                            Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_NHBW_Rail.csv\n                            MND Raw Data\n                            \n                        ]\n                        <built-in function mul>\n                        [\n                            1.0\n                        ]\n                        \n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n"}, "json://3": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 3, "_purpose": "Other", "_time_period": "PM_peak_hr", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by operation <built-in function add> (reverse: False) on\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: PM_peak_hr\npurpose: Other\nlevel: 5\nzone_count: 168\nmatrix_sum: 390.3547307334552\ninterzonal_sum: 383.85227106544426\nintrazonal_sum: 6.502459668010914\nComments:\nCreated by operation <built-in function add> (reverse: False) on\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: PM_peak_hr\n    purpose: Other\n    level: 5\n    zone_count: 168\n    matrix_sum: 323.0245909485739\n    interzonal_sum: 320.36911224175265\n    intrazonal_sum: 2.6554787068212633\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: PM_peak_hr\n        purpose: IB_HBO\n        level: 5\n        zone_count: 168\n        matrix_sum: 323.0245909485739\n        interzonal_sum: 320.36911224175265\n        intrazonal_sum: 2.6554787068212633\n        Comments:\n        Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: PM_peak_hr\n            purpose: IB_HBO\n            level: 5\n            zone_count: 168\n            matrix_sum: 323.0245909485739\n            interzonal_sum: 320.89961107223587\n            intrazonal_sum: 2.124979876338017\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: PM_peak_hr\n                purpose: IB_HBO\n                level: 5\n                zone_count: 168\n                matrix_sum: 323.0245909485739\n                interzonal_sum: 320.89961107223587\n                intrazonal_sum: 2.124979876338017\n                Comments:\n                Created by furness_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: PM_peak_hr\n                    purpose: IB_HBO\n                    level: 3\n                    zone_count: 168\n                    matrix_sum: 424.00000000000006\n                    interzonal_sum: 421.3228816821991\n                    intrazonal_sum: 2.6771183178009266\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: PM_peak_hr\n                        purpose: IB_HBO\n                        level: 3\n                        zone_count: 168\n                        matrix_sum: 424.00000000000006\n                        interzonal_sum: 421.3228816821991\n                        intrazonal_sum: 2.6771183178009266\n                        Comments:\n                        Created by disaggregate_matrix operation on the following matrix:\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: PM_peak_hr\n                            purpose: IB_HBO\n                            level: 3\n                            zone_count: 120\n                            matrix_sum: 424.0\n                            interzonal_sum: 421.0\n                            intrazonal_sum: 3.0\n                            Comments:\n                            Created by copy operation on the following matrix:\n                            [\n                                Matrix Object\n                                vehicle_type: Rail\n                                value_type: Person Trips\n                                time_period: PM_peak_hr\n                                purpose: IB_HBO\n                                level: 3\n                                zone_count: 120\n                                matrix_sum: 424.0\n                                interzonal_sum: 421.0\n                                intrazonal_sum: 3.0\n                                Comments:\n                                Created by operation <built-in function mul> (reverse: False) on\n                                [\n                                    Matrix Object\n                                    vehicle_type: Rail\n                                    value_type: Person Trips\n                                    time_period: PM_peak_hr\n                                    purpose: IB_HBO\n                                    level: 3\n                                    zone_count: 120\n                                    matrix_sum: 424.0\n                                    interzonal_sum: 421.0\n                                    intrazonal_sum: 3.0\n                                    Comments:\n                                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_IB_HBO_Rail.csv\n                                    MND Raw Data\n                                    \n                                ]\n                                <built-in function mul>\n                                [\n                                    1.0\n                                ]\n                                \n                            ]\n                            \n                        ]\n                        \n                    ]\n                    \n                ]\n                Convergence Information:\n                1: count: 168, col_pass: 34, row_pass: 64\n                2: count: 168, col_pass: 25, row_pass: 65\n                3: count: 168, col_pass: 46, row_pass: 66\n                4: count: 168, col_pass: 73, row_pass: 108\n                5: count: 168, col_pass: 158, row_pass: 115\n                6: count: 168, col_pass: 158, row_pass: 119\n                7: count: 168, col_pass: 168, row_pass: 168\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n<built-in function add>\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: PM_peak_hr\n    purpose: OB_HBO\n    level: 6\n    zone_count: 168\n    matrix_sum: 67.33013978488124\n    interzonal_sum: 63.48315882369159\n    intrazonal_sum: 3.846980961189651\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: PM_peak_hr\n        purpose: OB_HBO\n        level: 6\n        zone_count: 168\n        matrix_sum: 67.33013978488124\n        interzonal_sum: 63.48315882369159\n        intrazonal_sum: 3.846980961189651\n        Comments:\n        Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: PM_peak_hr\n            purpose: OB_HBO\n            level: 6\n            zone_count: 168\n            matrix_sum: 67.33013978488125\n            interzonal_sum: 66.6316110196654\n            intrazonal_sum: 0.698528765215848\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: PM_peak_hr\n                purpose: OB_HBO\n                level: 6\n                zone_count: 168\n                matrix_sum: 67.33013978488125\n                interzonal_sum: 66.6316110196654\n                intrazonal_sum: 0.698528765215848\n                Comments:\n                Created by furness_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: PM_peak_hr\n                    purpose: OB_HBO\n                    level: 4\n                    zone_count: 168\n                    matrix_sum: 87.0\n                    interzonal_sum: 86.22218816515077\n                    intrazonal_sum: 0.7778118348492377\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: PM_peak_hr\n                        purpose: OB_HBO\n                        level: 4\n                        zone_count: 168\n                        matrix_sum: 87.0\n                        interzonal_sum: 86.22218816515077\n                        intrazonal_sum: 0.7778118348492377\n                        Comments:\n                        Created by disaggregate_matrix operation on the following matrix:\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: PM_peak_hr\n                            purpose: OB_HBO\n                            level: 4\n                            zone_count: 120\n                            matrix_sum: 87.0\n                            interzonal_sum: 85.0\n                            intrazonal_sum: 2.0\n                            Comments:\n                            Created by copy operation on the following matrix:\n                            [\n                                Matrix Object\n                                vehicle_type: Rail\n                                value_type: Person Trips\n                                time_period: PM_peak_hr\n                                purpose: OB_HBO\n                                level: 4\n                                zone_count: 120\n                                matrix_sum: 87.0\n                                interzonal_sum: 85.0\n                                intrazonal_sum: 2.0\n                                Comments:\n                                Created by operation <built-in function mul> (reverse: False) on\n                                [\n                                    Matrix Object\n                                    vehicle_type: Rail\n                                    value_type: Person Trips\n                                    time_period: PM_peak_hr\n                                    purpose: OB_HBO\n                                    level: 4\n                                    zone_count: 120\n                                    matrix_sum: 87.0\n                                    interzonal_sum: 85.0\n                                    intrazonal_sum: 2.0\n                                    Comments:\n                                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_OB_HBO_Rail.csv\n                                    MND Raw Data\n                                    \n                                ]\n                                <built-in function mul>\n                                [\n                                    1.0\n                                ]\n                                \n                            ]\n                            \n                        ]\n                        \n                    ]\n                    \n                ]\n                Convergence Information:\n                1: count: 168, col_pass: 86, row_pass: 119\n                2: count: 168, col_pass: 135, row_pass: 123\n                3: count: 168, col_pass: 159, row_pass: 144\n                4: count: 168, col_pass: 167, row_pass: 166\n                5: count: 168, col_pass: 168, row_pass: 168\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n<built-in function add>\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: PM_peak_hr\npurpose: NHBO\nlevel: 8\nzone_count: 168\nmatrix_sum: 192.0\ninterzonal_sum: 190.7726144316171\nintrazonal_sum: 1.2273855683829047\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: PM_peak_hr\n    purpose: NHBO\n    level: 8\n    zone_count: 168\n    matrix_sum: 192.0\n    interzonal_sum: 190.7726144316171\n    intrazonal_sum: 1.2273855683829047\n    Comments:\n    Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: PM_peak_hr\n        purpose: NHBO\n        level: 8\n        zone_count: 168\n        matrix_sum: 192.0\n        interzonal_sum: 191.22237532348862\n        intrazonal_sum: 0.7776246765113847\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: PM_peak_hr\n            purpose: NHBO\n            level: 8\n            zone_count: 168\n            matrix_sum: 192.0\n            interzonal_sum: 191.22237532348862\n            intrazonal_sum: 0.7776246765113847\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: PM_peak_hr\n                purpose: NHBO\n                level: 6\n                zone_count: 168\n                matrix_sum: 192.0\n                interzonal_sum: 191.22237532348862\n                intrazonal_sum: 0.7776246765113847\n                Comments:\n                Created by disaggregate_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: PM_peak_hr\n                    purpose: NHBO\n                    level: 6\n                    zone_count: 120\n                    matrix_sum: 192.0\n                    interzonal_sum: 190.0\n                    intrazonal_sum: 2.0\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: PM_peak_hr\n                        purpose: NHBO\n                        level: 6\n                        zone_count: 120\n                        matrix_sum: 192.0\n                        interzonal_sum: 190.0\n                        intrazonal_sum: 2.0\n                        Comments:\n                        Created by operation <built-in function mul> (reverse: False) on\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: PM_peak_hr\n                            purpose: NHBO\n                            level: 6\n                            zone_count: 120\n                            matrix_sum: 192.0\n                            interzonal_sum: 190.0\n                            intrazonal_sum: 2.0\n                            Comments:\n                            Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_NHBO_Rail.csv\n                            MND Raw Data\n                            \n                        ]\n                        <built-in function mul>\n                        [\n                            1.0\n                        ]\n                        \n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n"}}}