{"py/object": "matrix_class_v2.MatrixStack", "_name": "modelpurposes", "_vehicle_type": "Rail", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"json://501": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 501, "_targets": {"json://501": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://502": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 502, "_targets": {"json://502": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://504": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 504, "_targets": {"json://504": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://505": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 505, "_targets": {"json://505": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://506": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 506, "_targets": {"json://506": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://509": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 509, "_targets": {"json://509": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://511": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 511, "_targets": {"json://511": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://512": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 512, "_targets": {"json://512": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://513": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 513, "_targets": {"json://513": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://514": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 514, "_targets": {"json://514": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://515": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 515, "_targets": {"json://515": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://516": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 516, "_targets": {"json://516": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://517": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 517, "_targets": {"json://517": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://519": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 519, "_targets": {"json://519": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://520": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 520, "_targets": {"json://520": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://521": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 521, "_targets": {"json://521": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://523": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 523, "_targets": {"json://523": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://524": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 524, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://525": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 525, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://526": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 526, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://527": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 527, "_targets": {"json://527": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://528": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 528, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://531": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 531, "_targets": {"json://531": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://532": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 532, "_targets": {"json://532": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://533": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 533, "_targets": {"json://533": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://534": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 534, "_targets": {"json://534": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://535": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 535, "_targets": {"json://535": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://536": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 536, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://537": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 537, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://538": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 538, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://539": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 539, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://540": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 540, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://541": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 541, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://542": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 542, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://543": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 543, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://544": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 544, "_targets": {"json://544": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://545": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 545, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://546": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 546, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://547": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 547, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://548": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 548, "_targets": {"json://548": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://551": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 551, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://562": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 562, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://566": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 566, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://567": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 567, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://570": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 570, "_targets": {"json://570": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://571": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 571, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://572": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 572, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://573": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 573, "_targets": {"json://573": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://601": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 601, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://602": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 602, "_targets": {"json://602": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://603": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 603, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://604": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 604, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://605": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 605, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://606": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 606, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://607": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 607, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://608": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 608, "_targets": {"json://608": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://609": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 609, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://610": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 610, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5001": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5001, "_targets": {"json://9009": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5002": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5002, "_targets": {"json://5002": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5003": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5003, "_targets": {"json://5003": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5004": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5004, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5005": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5005, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7105265186923027}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.2894734813076974}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5006": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5006, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.6336305213085214}, "json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.3663694786914786}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5007": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5007, "_targets": {"json://5007": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5008": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5008, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5009": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5009, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.12574033987473257}, "json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8742596601252675}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5010": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5010, "_targets": {"json://5010": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5011": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5011, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5012": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5012, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5013": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5013, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5014": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5014, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5015": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5015, "_targets": {"json://5015": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5016": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5016, "_targets": {"json://5019": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.23915238262142025}, "json://5133": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7608476173785798}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5017": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5017, "_targets": {"json://5068": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5018": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5018, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5019": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5019, "_targets": {"json://5133": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7224258444377175}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5020": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5020, "_targets": {"json://5020": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5021": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5021, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5022": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5022, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5023": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5023, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.16270700178727196}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8372929982127281}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5024": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5024, "_targets": {"json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5025": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5025, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.5924220607039576}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.40757793929604236}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5026": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5026, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5027": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5027, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5028": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5028, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8675205867701657}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.13247941322983423}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5029": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5029, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.5147106005829688}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.48528939941703114}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5030": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5030, "_targets": {"json://5007": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.38833292989011636}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.6116670701098836}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5031": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5031, "_targets": {"json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9863284020535221}, "json://5133": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.013671597946477902}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5032": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5032, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5033": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5033, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5034": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5034, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5035": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5035, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5036": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5036, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5037": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5037, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5038": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5038, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5039": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5039, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5040": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5040, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5041": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5041, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5042": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5042, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5043": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5043, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5045": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5045, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5046": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5046, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5047": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5047, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5048": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5048, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5049": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5049, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5050": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5050, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5051": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5051, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5052": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5052, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5053": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5053, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5054": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5054, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5055": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5055, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5056": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5056, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5065": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5065, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5067": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5067, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.06201399661995637}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9379860033800437}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5068": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5068, "_targets": {"json://5068": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5069": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5069, "_targets": {"json://5069": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5070": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5070, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5100": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5100, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5101": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5101, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5102": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5102, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5103": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5103, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5104": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5104, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5105": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5105, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5106": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5106, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5107": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5107, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.29235456942551624}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7076454305744838}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5108": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5108, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5109": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5109, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5110": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5110, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7387638702178395}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.26123612978216043}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5111": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5111, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.2515912022033352}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7484087977966648}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5112": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5112, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5115": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5115, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.22736056963670478}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7726394303632952}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5116": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5116, "_targets": {"json://5116": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5117": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5117, "_targets": {"json://5139": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.28054378071849867}, "json://5002": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7194562192815013}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5118": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5118, "_targets": {"json://5118": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5119": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5119, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5120": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5120, "_targets": {"json://5121": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5121": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5121, "_targets": {"json://5121": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5122": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5122, "_targets": {"json://5122": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5124": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5124, "_targets": {"json://5122": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.4437572194572055}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5125": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5125, "_targets": {"json://5124": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.13644820554642537}, "json://5003": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8635517944535747}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5126": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5126, "_targets": {"json://5132": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5127": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5127, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5128": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5128, "_targets": {"json://5132": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.028333630736165107}, "json://5003": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9716663692638349}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5129": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5129, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.11436485547237808}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.8856351445276219}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5130": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5130, "_targets": {"json://5132": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.29984251486319297}, "json://5003": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.7001574851368071}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5131": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5131, "_targets": {"json://5131": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5132": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5132, "_targets": {"json://5132": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5133": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5133, "_targets": {"json://5133": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5134": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5134, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.32382409830106296}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.676175901698937}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5135": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5135, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.08645655874211541}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9135434412578846}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5136": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5136, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.239089678008408}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5137": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5137, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5138": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5138, "_targets": {"json://5010": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5139": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5139, "_targets": {"json://5068": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5140": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5140, "_targets": {"json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5141": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5141, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.2216693993246311}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.778330600675369}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5142": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5142, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.026609684324048147}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9733903156759518}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://5143": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 5143, "_targets": {"json://5136": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.0716213365076186}, "json://573": {"py/object": "numpy.float64", "dtype": "float64", "value": 0.9283786634923814}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9001": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9001, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9002": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9002, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9003": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9003, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9004": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9004, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9005": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9005, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9006": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9006, "_targets": {"json://5069": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9007": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9007, "_targets": {"json://9009": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9008": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9008, "_targets": {"json://9009": {"py/object": "numpy.float64", "dtype": "float64", "value": 1.0}}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}, "json://9009": {"py/object": "matrix_class_v2.ZoneMapping", "_zone": 9009, "_targets": {"json://9009": 1}, "_target_min_zone_idx": -1, "_target_max_zone_idx": -1}}}, "_zones": {"py/object": "pandas.core.frame.DataFrame", "comp": true, "values": "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", "txt": false, "meta": {"dtypes": {"index": "int64", "mnd_zone": "int64", "x_coord": "int64", "y_coord": "int64", "area_ref": "object", "sector": "int64", "msoa": "object", "district": "object", "Urban city and town": "int64", "Rural village": "int64", "Rural hamlets and isolated dwellings": "int64", "Rural town and fringe": "int64", "Rural village in a sparse setting": "int64", "Rural hamlets and isolated dwellings in a sparse setting": "int64", "Rural town and fringe in a sparse setting": "int64", "urbanrural": "object", "cordon_inner": "object", "cordon_outer": "object", "Internal": "bool"}, "index": "{\"py/object\": \"pandas.core.indexes.numeric.Int64Index\", \"comp\": true, \"values\": \"eJwtk8FtRSEQA1tJATnYsMCnlij9txE8m4ulp7VXMPj9LPn7a2lEKrIiO3KfOFNn6hmJxbE4Fp9IfEORmEd8I74R34hvxDc+T2YsM/tmfDO+Gd+Mb8Y38WVpZWklUUlUEpVEJVFJVBKVxIpvx7cz2BmcLDgZnAzOW7Bz3537bvFZkRXZkRP5RN4JtrNAjagZJfQUVM2qYSX49IPm8OosAAVBgVAwFBAFRYFRJgtNgVOjn4YsWAVXAVaQFWgFWw2ykyygBWmBWrAWsAVtgVvwFsAFcYFc1Z0gC3BBXCAXzFWkFikeQIvUIrW6UGQX2d3tYsNmw2YDD2W1UjloG9qGtqFtaBvahrb/e0q269p97Zp2T7uoEDaEDWGPrjd+2Bq2hq1ha9gatoatYevZfwUnhK1ha9gatoatYWvYGraGrcP20q5Luy7turTr0q5Luy7turTr6f39AzjkrWM=\", \"txt\": false, \"meta\": {\"dtype\": \"int64\", \"name\": \"reference\"}}", "column_level_names": [null], "header": [0]}}, "_source_file": {"py/reduce": [{"py/type": "pathlib.WindowsPath"}, {"py/tuple": ["C:\\", "Users", "UKTMB001", "Documents", "Python Scripts", "MND", "ZoningTemplate_Model_v2.xlsx"]}]}, "_source_sheet": "zones"}, "_time_period": "Inter_peak", "_value_type": "Person Trips", "_levels": {"json://1": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "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", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 1, "_purpose": "Commuting", "_time_period": "Inter_peak", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by operation <built-in function add> (reverse: False) on\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: Inter_peak\npurpose: Commuting\nlevel: 1\nzone_count: 168\nmatrix_sum: 28.83333333333333\ninterzonal_sum: 27.273707625023444\nintrazonal_sum: 1.5596257083098855\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: Inter_peak\n    purpose: IB_HBW\n    level: 1\n    zone_count: 168\n    matrix_sum: 28.83333333333333\n    interzonal_sum: 27.273707625023444\n    intrazonal_sum: 1.5596257083098855\n    Comments:\n    Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: Inter_peak\n        purpose: IB_HBW\n        level: 1\n        zone_count: 168\n        matrix_sum: 28.83333333333333\n        interzonal_sum: 28.629303271931317\n        intrazonal_sum: 0.2040300614020109\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: Inter_peak\n            purpose: IB_HBW\n            level: 1\n            zone_count: 168\n            matrix_sum: 28.83333333333333\n            interzonal_sum: 28.629303271931317\n            intrazonal_sum: 0.2040300614020109\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: Inter_peak\n                purpose: IB_HBW\n                level: 1\n                zone_count: 168\n                matrix_sum: 28.83333333333333\n                interzonal_sum: 28.629303271931317\n                intrazonal_sum: 0.2040300614020109\n                Comments:\n                Created by disaggregate_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: Inter_peak\n                    purpose: IB_HBW\n                    level: 1\n                    zone_count: 120\n                    matrix_sum: 28.83333333333333\n                    interzonal_sum: 28.66666666666666\n                    intrazonal_sum: 0.16666666666666666\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: Inter_peak\n                        purpose: IB_HBW\n                        level: 1\n                        zone_count: 120\n                        matrix_sum: 28.83333333333333\n                        interzonal_sum: 28.66666666666666\n                        intrazonal_sum: 0.16666666666666666\n                        Comments:\n                        Created by operation <built-in function mul> (reverse: False) on\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: Inter_peak\n                            purpose: IB_HBW\n                            level: 1\n                            zone_count: 120\n                            matrix_sum: 173.0\n                            interzonal_sum: 172.0\n                            intrazonal_sum: 1.0\n                            Comments:\n                            Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_IB_HBW_Rail.csv\n                            MND Raw Data\n                            \n                        ]\n                        <built-in function mul>\n                        [\n                            0.16666666666666666\n                        ]\n                        \n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n<built-in function add>\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: Inter_peak\npurpose: OB_HBW\nlevel: 2\nzone_count: 168\nmatrix_sum: 16.833333333333332\ninterzonal_sum: 15.77252475796611\nintrazonal_sum: 1.0608085753672216\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: Inter_peak\n    purpose: OB_HBW\n    level: 2\n    zone_count: 168\n    matrix_sum: 16.833333333333332\n    interzonal_sum: 15.77252475796611\n    intrazonal_sum: 1.0608085753672216\n    Comments:\n    Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: Inter_peak\n        purpose: OB_HBW\n        level: 2\n        zone_count: 168\n        matrix_sum: 16.833333333333332\n        interzonal_sum: 16.333333333333332\n        intrazonal_sum: 0.5\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: Inter_peak\n            purpose: OB_HBW\n            level: 2\n            zone_count: 168\n            matrix_sum: 16.833333333333332\n            interzonal_sum: 16.333333333333332\n            intrazonal_sum: 0.5\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: Inter_peak\n                purpose: OB_HBW\n                level: 2\n                zone_count: 168\n                matrix_sum: 16.833333333333332\n                interzonal_sum: 16.333333333333332\n                intrazonal_sum: 0.5\n                Comments:\n                Created by disaggregate_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: Inter_peak\n                    purpose: OB_HBW\n                    level: 2\n                    zone_count: 120\n                    matrix_sum: 16.833333333333332\n                    interzonal_sum: 16.833333333333332\n                    intrazonal_sum: 0.0\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: Inter_peak\n                        purpose: OB_HBW\n                        level: 2\n                        zone_count: 120\n                        matrix_sum: 16.833333333333332\n                        interzonal_sum: 16.833333333333332\n                        intrazonal_sum: 0.0\n                        Comments:\n                        Created by operation <built-in function mul> (reverse: False) on\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: Inter_peak\n                            purpose: OB_HBW\n                            level: 2\n                            zone_count: 120\n                            matrix_sum: 101.0\n                            interzonal_sum: 101.0\n                            intrazonal_sum: 0.0\n                            Comments:\n                            Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_OB_HBW_Rail.csv\n                            MND Raw Data\n                            \n                        ]\n                        <built-in function mul>\n                        [\n                            0.16666666666666666\n                        ]\n                        \n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n"}, "json://2": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 2, "_purpose": "Employers Business", "_time_period": "Inter_peak", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by operation <built-in function add> (reverse: False) on\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: Inter_peak\npurpose: Employers Business\nlevel: 3\nzone_count: 168\nmatrix_sum: 43.75364910044465\ninterzonal_sum: 42.13038247932409\nintrazonal_sum: 1.6232666211205546\nComments:\nCreated by operation <built-in function add> (reverse: False) on\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: Inter_peak\n    purpose: Employers Business\n    level: 3\n    zone_count: 168\n    matrix_sum: 21.54551471108961\n    interzonal_sum: 20.924003797638598\n    intrazonal_sum: 0.6215109134510111\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: Inter_peak\n        purpose: IB_HBEmp\n        level: 3\n        zone_count: 168\n        matrix_sum: 21.54551471108961\n        interzonal_sum: 20.924003797638598\n        intrazonal_sum: 0.6215109134510111\n        Comments:\n        Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: Inter_peak\n            purpose: IB_HBEmp\n            level: 3\n            zone_count: 168\n            matrix_sum: 21.545514711089606\n            interzonal_sum: 21.23240812799026\n            intrazonal_sum: 0.31310658309934547\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: Inter_peak\n                purpose: IB_HBEmp\n                level: 3\n                zone_count: 168\n                matrix_sum: 21.545514711089606\n                interzonal_sum: 21.23240812799026\n                intrazonal_sum: 0.31310658309934547\n                Comments:\n                Created by furness_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: Inter_peak\n                    purpose: IB_HBO\n                    level: 3\n                    zone_count: 168\n                    matrix_sum: 157.16666666666666\n                    interzonal_sum: 155.75512940409635\n                    intrazonal_sum: 1.411537262570307\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: Inter_peak\n                        purpose: IB_HBO\n                        level: 3\n                        zone_count: 168\n                        matrix_sum: 157.16666666666666\n                        interzonal_sum: 155.75512940409635\n                        intrazonal_sum: 1.411537262570307\n                        Comments:\n                        Created by disaggregate_matrix operation on the following matrix:\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: Inter_peak\n                            purpose: IB_HBO\n                            level: 3\n                            zone_count: 120\n                            matrix_sum: 157.16666666666663\n                            interzonal_sum: 156.3333333333333\n                            intrazonal_sum: 0.8333333333333333\n                            Comments:\n                            Created by copy operation on the following matrix:\n                            [\n                                Matrix Object\n                                vehicle_type: Rail\n                                value_type: Person Trips\n                                time_period: Inter_peak\n                                purpose: IB_HBO\n                                level: 3\n                                zone_count: 120\n                                matrix_sum: 157.16666666666663\n                                interzonal_sum: 156.3333333333333\n                                intrazonal_sum: 0.8333333333333333\n                                Comments:\n                                Created by operation <built-in function mul> (reverse: False) on\n                                [\n                                    Matrix Object\n                                    vehicle_type: Rail\n                                    value_type: Person Trips\n                                    time_period: Inter_peak\n                                    purpose: IB_HBO\n                                    level: 3\n                                    zone_count: 120\n                                    matrix_sum: 943.0\n                                    interzonal_sum: 938.0\n                                    intrazonal_sum: 5.0\n                                    Comments:\n                                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_IB_HBO_Rail.csv\n                                    MND Raw Data\n                                    \n                                ]\n                                <built-in function mul>\n                                [\n                                    0.16666666666666666\n                                ]\n                                \n                            ]\n                            \n                        ]\n                        \n                    ]\n                    \n                ]\n                Convergence Information:\n                1: count: 168, col_pass: 16, row_pass: 26\n                2: count: 168, col_pass: 7, row_pass: 27\n                3: count: 168, col_pass: 24, row_pass: 30\n                4: count: 168, col_pass: 28, row_pass: 38\n                5: count: 168, col_pass: 50, row_pass: 121\n                6: count: 168, col_pass: 168, row_pass: 168\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n<built-in function add>\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: Inter_peak\n    purpose: OB_HBEmp\n    level: 4\n    zone_count: 168\n    matrix_sum: 22.208134389355035\n    interzonal_sum: 21.206378681685493\n    intrazonal_sum: 1.0017557076695436\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: Inter_peak\n        purpose: OB_HBEmp\n        level: 4\n        zone_count: 168\n        matrix_sum: 22.208134389355035\n        interzonal_sum: 21.206378681685493\n        intrazonal_sum: 1.0017557076695436\n        Comments:\n        Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: Inter_peak\n            purpose: OB_HBEmp\n            level: 4\n            zone_count: 168\n            matrix_sum: 22.20813438935504\n            interzonal_sum: 21.915930182929074\n            intrazonal_sum: 0.29220420642596434\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: Inter_peak\n                purpose: OB_HBEmp\n                level: 4\n                zone_count: 168\n                matrix_sum: 22.20813438935504\n                interzonal_sum: 21.915930182929074\n                intrazonal_sum: 0.29220420642596434\n                Comments:\n                Created by furness_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: Inter_peak\n                    purpose: OB_HBO\n                    level: 4\n                    zone_count: 168\n                    matrix_sum: 155.33333333333334\n                    interzonal_sum: 154.010461458477\n                    intrazonal_sum: 1.3228718748563326\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: Inter_peak\n                        purpose: OB_HBO\n                        level: 4\n                        zone_count: 168\n                        matrix_sum: 155.33333333333334\n                        interzonal_sum: 154.010461458477\n                        intrazonal_sum: 1.3228718748563326\n                        Comments:\n                        Created by disaggregate_matrix operation on the following matrix:\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: Inter_peak\n                            purpose: OB_HBO\n                            level: 4\n                            zone_count: 120\n                            matrix_sum: 155.33333333333331\n                            interzonal_sum: 154.66666666666666\n                            intrazonal_sum: 0.6666666666666666\n                            Comments:\n                            Created by copy operation on the following matrix:\n                            [\n                                Matrix Object\n                                vehicle_type: Rail\n                                value_type: Person Trips\n                                time_period: Inter_peak\n                                purpose: OB_HBO\n                                level: 4\n                                zone_count: 120\n                                matrix_sum: 155.33333333333331\n                                interzonal_sum: 154.66666666666666\n                                intrazonal_sum: 0.6666666666666666\n                                Comments:\n                                Created by operation <built-in function mul> (reverse: False) on\n                                [\n                                    Matrix Object\n                                    vehicle_type: Rail\n                                    value_type: Person Trips\n                                    time_period: Inter_peak\n                                    purpose: OB_HBO\n                                    level: 4\n                                    zone_count: 120\n                                    matrix_sum: 932.0\n                                    interzonal_sum: 928.0\n                                    intrazonal_sum: 4.0\n                                    Comments:\n                                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_OB_HBO_Rail.csv\n                                    MND Raw Data\n                                    \n                                ]\n                                <built-in function mul>\n                                [\n                                    0.16666666666666666\n                                ]\n                                \n                            ]\n                            \n                        ]\n                        \n                    ]\n                    \n                ]\n                Convergence Information:\n                1: count: 168, col_pass: 31, row_pass: 5\n                2: count: 168, col_pass: 26, row_pass: 24\n                3: count: 168, col_pass: 46, row_pass: 25\n                4: count: 168, col_pass: 47, row_pass: 29\n                5: count: 168, col_pass: 64, row_pass: 45\n                6: count: 168, col_pass: 106, row_pass: 167\n                7: count: 168, col_pass: 168, row_pass: 168\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n<built-in function add>\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: Inter_peak\npurpose: NHBW\nlevel: 7\nzone_count: 168\nmatrix_sum: 55.0\ninterzonal_sum: 53.70117748218731\nintrazonal_sum: 1.2988225178126864\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: Inter_peak\n    purpose: NHBW\n    level: 7\n    zone_count: 168\n    matrix_sum: 55.0\n    interzonal_sum: 53.70117748218731\n    intrazonal_sum: 1.2988225178126864\n    Comments:\n    Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: Inter_peak\n        purpose: NHBW\n        level: 7\n        zone_count: 168\n        matrix_sum: 54.99999999999999\n        interzonal_sum: 54.59816107740889\n        intrazonal_sum: 0.4018389225911059\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: Inter_peak\n            purpose: NHBW\n            level: 7\n            zone_count: 168\n            matrix_sum: 54.99999999999999\n            interzonal_sum: 54.59816107740889\n            intrazonal_sum: 0.4018389225911059\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: Inter_peak\n                purpose: NHBW\n                level: 5\n                zone_count: 168\n                matrix_sum: 54.99999999999999\n                interzonal_sum: 54.59816107740889\n                intrazonal_sum: 0.4018389225911059\n                Comments:\n                Created by disaggregate_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: Inter_peak\n                    purpose: NHBW\n                    level: 5\n                    zone_count: 120\n                    matrix_sum: 54.99999999999999\n                    interzonal_sum: 54.49999999999999\n                    intrazonal_sum: 0.5\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: Inter_peak\n                        purpose: NHBW\n                        level: 5\n                        zone_count: 120\n                        matrix_sum: 54.99999999999999\n                        interzonal_sum: 54.49999999999999\n                        intrazonal_sum: 0.5\n                        Comments:\n                        Created by operation <built-in function mul> (reverse: False) on\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: Inter_peak\n                            purpose: NHBW\n                            level: 5\n                            zone_count: 120\n                            matrix_sum: 330.0\n                            interzonal_sum: 327.0\n                            intrazonal_sum: 3.0\n                            Comments:\n                            Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_NHBW_Rail.csv\n                            MND Raw Data\n                            \n                        ]\n                        <built-in function mul>\n                        [\n                            0.16666666666666666\n                        ]\n                        \n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n"}, "json://3": {"py/object": "matrix_class_v2.Matrix", "_zones": {"py/object": "matrix_class_v2.Zones", "_name": "2019_NWL_Model_zones", "_disaggregation_maps": {"rail_redist": {"py/id": 3}}, "_zones": {"py/id": 488}, "_source_file": {"py/id": 490}, "_source_sheet": "zones"}, "_matrix": {"py/object": "numpy.ndarray", "values": "", "shape": [168, 168], "dtype": "float64", "byteorder": "<"}, "_level": 3, "_purpose": "Other", "_time_period": "Inter_peak", "_vehicle_type": "Rail", "_value_type": "Person Trips", "_comments": "Created by operation <built-in function add> (reverse: False) on\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: Inter_peak\npurpose: Other\nlevel: 5\nzone_count: 168\nmatrix_sum: 268.73121920929094\ninterzonal_sum: 263.2633474555544\nintrazonal_sum: 5.467871753736505\nComments:\nCreated by operation <built-in function add> (reverse: False) on\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: Inter_peak\n    purpose: Other\n    level: 5\n    zone_count: 168\n    matrix_sum: 135.61337046677883\n    interzonal_sum: 132.9014476158065\n    intrazonal_sum: 2.7119228509723334\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: Inter_peak\n        purpose: IB_HBO\n        level: 5\n        zone_count: 168\n        matrix_sum: 135.61337046677883\n        interzonal_sum: 132.9014476158065\n        intrazonal_sum: 2.7119228509723334\n        Comments:\n        Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: Inter_peak\n            purpose: IB_HBO\n            level: 5\n            zone_count: 168\n            matrix_sum: 135.61337046677883\n            interzonal_sum: 134.47348881028233\n            intrazonal_sum: 1.1398816564965029\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: Inter_peak\n                purpose: IB_HBO\n                level: 5\n                zone_count: 168\n                matrix_sum: 135.61337046677883\n                interzonal_sum: 134.47348881028233\n                intrazonal_sum: 1.1398816564965029\n                Comments:\n                Created by furness_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: Inter_peak\n                    purpose: IB_HBO\n                    level: 3\n                    zone_count: 168\n                    matrix_sum: 157.16666666666666\n                    interzonal_sum: 155.75512940409635\n                    intrazonal_sum: 1.411537262570307\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: Inter_peak\n                        purpose: IB_HBO\n                        level: 3\n                        zone_count: 168\n                        matrix_sum: 157.16666666666666\n                        interzonal_sum: 155.75512940409635\n                        intrazonal_sum: 1.411537262570307\n                        Comments:\n                        Created by disaggregate_matrix operation on the following matrix:\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: Inter_peak\n                            purpose: IB_HBO\n                            level: 3\n                            zone_count: 120\n                            matrix_sum: 157.16666666666663\n                            interzonal_sum: 156.3333333333333\n                            intrazonal_sum: 0.8333333333333333\n                            Comments:\n                            Created by copy operation on the following matrix:\n                            [\n                                Matrix Object\n                                vehicle_type: Rail\n                                value_type: Person Trips\n                                time_period: Inter_peak\n                                purpose: IB_HBO\n                                level: 3\n                                zone_count: 120\n                                matrix_sum: 157.16666666666663\n                                interzonal_sum: 156.3333333333333\n                                intrazonal_sum: 0.8333333333333333\n                                Comments:\n                                Created by operation <built-in function mul> (reverse: False) on\n                                [\n                                    Matrix Object\n                                    vehicle_type: Rail\n                                    value_type: Person Trips\n                                    time_period: Inter_peak\n                                    purpose: IB_HBO\n                                    level: 3\n                                    zone_count: 120\n                                    matrix_sum: 943.0\n                                    interzonal_sum: 938.0\n                                    intrazonal_sum: 5.0\n                                    Comments:\n                                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_IB_HBO_Rail.csv\n                                    MND Raw Data\n                                    \n                                ]\n                                <built-in function mul>\n                                [\n                                    0.16666666666666666\n                                ]\n                                \n                            ]\n                            \n                        ]\n                        \n                    ]\n                    \n                ]\n                Convergence Information:\n                1: count: 168, col_pass: 28, row_pass: 34\n                2: count: 168, col_pass: 46, row_pass: 109\n                3: count: 168, col_pass: 168, row_pass: 168\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n<built-in function add>\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: Inter_peak\n    purpose: OB_HBO\n    level: 6\n    zone_count: 168\n    matrix_sum: 133.11784874251214\n    interzonal_sum: 130.36189983974796\n    intrazonal_sum: 2.75594890276417\n    Comments:\n    Created by copy operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: Inter_peak\n        purpose: OB_HBO\n        level: 6\n        zone_count: 168\n        matrix_sum: 133.11784874251214\n        interzonal_sum: 130.36189983974796\n        intrazonal_sum: 2.75594890276417\n        Comments:\n        Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: Inter_peak\n            purpose: OB_HBO\n            level: 6\n            zone_count: 168\n            matrix_sum: 133.11784874251214\n            interzonal_sum: 132.05695191396674\n            intrazonal_sum: 1.060896828545399\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: Inter_peak\n                purpose: OB_HBO\n                level: 6\n                zone_count: 168\n                matrix_sum: 133.11784874251214\n                interzonal_sum: 132.05695191396674\n                intrazonal_sum: 1.060896828545399\n                Comments:\n                Created by furness_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: Inter_peak\n                    purpose: OB_HBO\n                    level: 4\n                    zone_count: 168\n                    matrix_sum: 155.33333333333334\n                    interzonal_sum: 154.010461458477\n                    intrazonal_sum: 1.3228718748563326\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: Inter_peak\n                        purpose: OB_HBO\n                        level: 4\n                        zone_count: 168\n                        matrix_sum: 155.33333333333334\n                        interzonal_sum: 154.010461458477\n                        intrazonal_sum: 1.3228718748563326\n                        Comments:\n                        Created by disaggregate_matrix operation on the following matrix:\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: Inter_peak\n                            purpose: OB_HBO\n                            level: 4\n                            zone_count: 120\n                            matrix_sum: 155.33333333333331\n                            interzonal_sum: 154.66666666666666\n                            intrazonal_sum: 0.6666666666666666\n                            Comments:\n                            Created by copy operation on the following matrix:\n                            [\n                                Matrix Object\n                                vehicle_type: Rail\n                                value_type: Person Trips\n                                time_period: Inter_peak\n                                purpose: OB_HBO\n                                level: 4\n                                zone_count: 120\n                                matrix_sum: 155.33333333333331\n                                interzonal_sum: 154.66666666666666\n                                intrazonal_sum: 0.6666666666666666\n                                Comments:\n                                Created by operation <built-in function mul> (reverse: False) on\n                                [\n                                    Matrix Object\n                                    vehicle_type: Rail\n                                    value_type: Person Trips\n                                    time_period: Inter_peak\n                                    purpose: OB_HBO\n                                    level: 4\n                                    zone_count: 120\n                                    matrix_sum: 932.0\n                                    interzonal_sum: 928.0\n                                    intrazonal_sum: 4.0\n                                    Comments:\n                                    Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_OB_HBO_Rail.csv\n                                    MND Raw Data\n                                    \n                                ]\n                                <built-in function mul>\n                                [\n                                    0.16666666666666666\n                                ]\n                                \n                            ]\n                            \n                        ]\n                        \n                    ]\n                    \n                ]\n                Convergence Information:\n                1: count: 168, col_pass: 37, row_pass: 30\n                2: count: 168, col_pass: 64, row_pass: 60\n                3: count: 168, col_pass: 110, row_pass: 168\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n<built-in function add>\n[\nMatrix Object\nvehicle_type: Rail\nvalue_type: Person Trips\ntime_period: Inter_peak\npurpose: NHBO\nlevel: 8\nzone_count: 168\nmatrix_sum: 184.83333333333331\ninterzonal_sum: 182.764046774684\nintrazonal_sum: 2.0692865586493046\nComments:\nCreated by copy operation on the following matrix:\n[\n    Matrix Object\n    vehicle_type: Rail\n    value_type: Person Trips\n    time_period: Inter_peak\n    purpose: NHBO\n    level: 8\n    zone_count: 168\n    matrix_sum: 184.83333333333331\n    interzonal_sum: 182.764046774684\n    intrazonal_sum: 2.0692865586493046\n    Comments:\n    Created by redistribute_matrix (redistributed matrix) operation on the following matrix:\n    [\n        Matrix Object\n        vehicle_type: Rail\n        value_type: Person Trips\n        time_period: Inter_peak\n        purpose: NHBO\n        level: 8\n        zone_count: 168\n        matrix_sum: 184.83333333333331\n        interzonal_sum: 183.52128000091085\n        intrazonal_sum: 1.312053332422464\n        Comments:\n        Created by copy operation on the following matrix:\n        [\n            Matrix Object\n            vehicle_type: Rail\n            value_type: Person Trips\n            time_period: Inter_peak\n            purpose: NHBO\n            level: 8\n            zone_count: 168\n            matrix_sum: 184.83333333333331\n            interzonal_sum: 183.52128000091085\n            intrazonal_sum: 1.312053332422464\n            Comments:\n            Created by copy operation on the following matrix:\n            [\n                Matrix Object\n                vehicle_type: Rail\n                value_type: Person Trips\n                time_period: Inter_peak\n                purpose: NHBO\n                level: 6\n                zone_count: 168\n                matrix_sum: 184.83333333333331\n                interzonal_sum: 183.52128000091085\n                intrazonal_sum: 1.312053332422464\n                Comments:\n                Created by disaggregate_matrix operation on the following matrix:\n                [\n                    Matrix Object\n                    vehicle_type: Rail\n                    value_type: Person Trips\n                    time_period: Inter_peak\n                    purpose: NHBO\n                    level: 6\n                    zone_count: 120\n                    matrix_sum: 184.8333333333333\n                    interzonal_sum: 183.66666666666663\n                    intrazonal_sum: 1.1666666666666667\n                    Comments:\n                    Created by copy operation on the following matrix:\n                    [\n                        Matrix Object\n                        vehicle_type: Rail\n                        value_type: Person Trips\n                        time_period: Inter_peak\n                        purpose: NHBO\n                        level: 6\n                        zone_count: 120\n                        matrix_sum: 184.8333333333333\n                        interzonal_sum: 183.66666666666663\n                        intrazonal_sum: 1.1666666666666667\n                        Comments:\n                        Created by operation <built-in function mul> (reverse: False) on\n                        [\n                            Matrix Object\n                            vehicle_type: Rail\n                            value_type: Person Trips\n                            time_period: Inter_peak\n                            purpose: NHBO\n                            level: 6\n                            zone_count: 120\n                            matrix_sum: 1109.0\n                            interzonal_sum: 1102.0\n                            intrazonal_sum: 7.0\n                            Comments:\n                            Imported matrix from C:\\Users\\UKTMB001\\Documents\\Python Scripts\\MND\\20200220 - Deliverable 1 Matrices\\D1_Weekday_NHBO_Rail.csv\n                            MND Raw Data\n                            \n                        ]\n                        <built-in function mul>\n                        [\n                            0.16666666666666666\n                        ]\n                        \n                    ]\n                    \n                ]\n                \n            ]\n            \n        ]\n        \n    ]\n    \n]\n\n]\n"}}}